{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cc64c907",
   "metadata": {
    "papermill": {
     "duration": 0.023621,
     "end_time": "2024-07-06T20:07:38.315915",
     "exception": false,
     "start_time": "2024-07-06T20:07:38.292294",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Calculating Recommended Stock\n",
    "\n",
    "This notebook is a demonstration of how to calculate recommended stock.\\\n",
    "It uses data from a fictional beverage distribution center.\n",
    "\n",
    "Step 0: Load, clean, and wrangle data\\\n",
    "Step 1: Initial observations\\\n",
    "Step 2: ABC analysis\\\n",
    "Step 3: XYZ analysis\\\n",
    "Step 4: Calculate safety stock\\\n",
    "Step 5: Calculate economic order quantity (optimal stock)\\\n",
    "Step 6: Calculate recommended stock\\\n",
    "Step 7: Final observations\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cef8389c",
   "metadata": {
    "papermill": {
     "duration": 0.023102,
     "end_time": "2024-07-06T20:07:38.362530",
     "exception": false,
     "start_time": "2024-07-06T20:07:38.339428",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 0: Load, clean, and wrangle data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f92efe37",
   "metadata": {
    "papermill": {
     "duration": 0.02307,
     "end_time": "2024-07-06T20:07:38.410312",
     "exception": false,
     "start_time": "2024-07-06T20:07:38.387242",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Load data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "48ff97fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:07:38.459089Z",
     "iopub.status.busy": "2024-07-06T20:07:38.458719Z",
     "iopub.status.idle": "2024-07-06T20:08:50.684566Z",
     "shell.execute_reply": "2024-07-06T20:08:50.683357Z"
    },
    "papermill": {
     "duration": 72.253465,
     "end_time": "2024-07-06T20:08:50.687387",
     "exception": false,
     "start_time": "2024-07-06T20:07:38.433922",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import warnings\n",
    "warnings.simplefilter(action='ignore', category=FutureWarning) #Addresses Kaggle problem\n",
    "\n",
    "invoice_purchases = pd.read_csv('/kaggle/input/inventory-analysis-case-study/InvoicePurchases12312016.csv',\n",
    "                                dtype = {'VendorNumber': str,'PONumber':str,},\n",
    "                                parse_dates=['InvoiceDate','PODate','PayDate'])\n",
    "end_inv = pd.read_csv('/kaggle/input/inventory-analysis-case-study/EndInvFINAL12312016.csv',\n",
    "                                dtype={'Store':str,'Brand':str},\n",
    "                                parse_dates=['endDate'])\n",
    "sales = pd.read_csv('/kaggle/input/inventory-analysis-case-study/SalesFINAL12312016.csv',\n",
    "                                dtype={'Store':str,'Brand':str,'VendorNo':str,'Classification':str},\n",
    "                                parse_dates=['SalesDate'])\n",
    "beg_inv = pd.read_csv('/kaggle/input/inventory-analysis-case-study/BegInvFINAL12312016.csv', \n",
    "                                dtype={'Store':str,'Brand':str},\n",
    "                                parse_dates=['startDate'])\n",
    "purchase_prices = pd.read_csv('/kaggle/input/inventory-analysis-case-study/2017PurchasePricesDec.csv', \n",
    "                                dtype={'Brand':str,'Classification':str,'VendorNumber':str})\n",
    "purchases = pd.read_csv('/kaggle/input/inventory-analysis-case-study/PurchasesFINAL12312016.csv', \n",
    "                                dtype={'Store':str,'Brand':str,'VendorNumber':str,\n",
    "                                       'PONumber':str,'Classification':str},\n",
    "                                parse_dates=['PODate','ReceivingDate','InvoiceDate','PayDate'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5b1d6b8",
   "metadata": {
    "papermill": {
     "duration": 0.023316,
     "end_time": "2024-07-06T20:08:50.734893",
     "exception": false,
     "start_time": "2024-07-06T20:08:50.711577",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Clean data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7e72a0be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:50.784844Z",
     "iopub.status.busy": "2024-07-06T20:08:50.784450Z",
     "iopub.status.idle": "2024-07-06T20:08:50.810058Z",
     "shell.execute_reply": "2024-07-06T20:08:50.808862Z"
    },
    "papermill": {
     "duration": 0.054447,
     "end_time": "2024-07-06T20:08:50.812804",
     "exception": false,
     "start_time": "2024-07-06T20:08:50.758357",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [],
   "source": [
    "purchase_prices.replace('Unknown', np.nan, inplace=True)\n",
    "purchase_prices.Volume = purchase_prices.Volume.astype('float64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e876f643",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:50.861376Z",
     "iopub.status.busy": "2024-07-06T20:08:50.860958Z",
     "iopub.status.idle": "2024-07-06T20:08:50.997329Z",
     "shell.execute_reply": "2024-07-06T20:08:50.995948Z"
    },
    "papermill": {
     "duration": 0.163815,
     "end_time": "2024-07-06T20:08:50.999994",
     "exception": false,
     "start_time": "2024-07-06T20:08:50.836179",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "end_inv.City = end_inv.City.fillna('TYWARDREATH')\n",
    "end_inv.InventoryId = end_inv.InventoryId.str.replace('__','_TYWARDREATH_')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe56572a",
   "metadata": {
    "papermill": {
     "duration": 0.023427,
     "end_time": "2024-07-06T20:08:51.047084",
     "exception": false,
     "start_time": "2024-07-06T20:08:51.023657",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Wrangle data\n",
    "Create total stock dataset by combining data from initial inventory and purchases."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f7c5351f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:51.095843Z",
     "iopub.status.busy": "2024-07-06T20:08:51.095413Z",
     "iopub.status.idle": "2024-07-06T20:08:51.100246Z",
     "shell.execute_reply": "2024-07-06T20:08:51.099095Z"
    },
    "papermill": {
     "duration": 0.03212,
     "end_time": "2024-07-06T20:08:51.102752",
     "exception": false,
     "start_time": "2024-07-06T20:08:51.070632",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "##Optional: limit purchases to first two months to match available sales data.\n",
    "#purchases = purchases.loc[purchases.ReceivingDate<'2016-03-01']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5b2d4334",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:51.151906Z",
     "iopub.status.busy": "2024-07-06T20:08:51.151521Z",
     "iopub.status.idle": "2024-07-06T20:08:52.540082Z",
     "shell.execute_reply": "2024-07-06T20:08:52.538964Z"
    },
    "papermill": {
     "duration": 1.416411,
     "end_time": "2024-07-06T20:08:52.542755",
     "exception": false,
     "start_time": "2024-07-06T20:08:51.126344",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>Price</th>\n",
       "      <th>Quantity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100</td>\n",
       "      <td>159.99</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>14.99</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>5.99</td>\n",
       "      <td>1175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10011</td>\n",
       "      <td>5.99</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10021</td>\n",
       "      <td>11.99</td>\n",
       "      <td>192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18753</th>\n",
       "      <td>994</td>\n",
       "      <td>21.99</td>\n",
       "      <td>136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18754</th>\n",
       "      <td>995</td>\n",
       "      <td>21.99</td>\n",
       "      <td>202</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18755</th>\n",
       "      <td>996</td>\n",
       "      <td>299.99</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18756</th>\n",
       "      <td>998</td>\n",
       "      <td>24.99</td>\n",
       "      <td>729</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18757</th>\n",
       "      <td>999</td>\n",
       "      <td>114.99</td>\n",
       "      <td>824</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>18758 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Brand   Price  Quantity\n",
       "0        100  159.99        33\n",
       "1       1000   14.99        47\n",
       "2       1001    5.99      1175\n",
       "3      10011    5.99         7\n",
       "4      10021   11.99       192\n",
       "...      ...     ...       ...\n",
       "18753    994   21.99       136\n",
       "18754    995   21.99       202\n",
       "18755    996  299.99        27\n",
       "18756    998   24.99       729\n",
       "18757    999  114.99       824\n",
       "\n",
       "[18758 rows x 3 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_stock1 = beg_inv[['Brand','onHand','Price']]\n",
    "total_stock1.columns = ['Brand','Quantity','Price']\n",
    "total_stock1 = total_stock1.groupby(['Brand','Price']).sum().reset_index()\n",
    "purchases_with_prices = pd.merge(purchases,purchase_prices[['Brand','Price']],on='Brand',how='left')\n",
    "total_stock2 = purchases_with_prices[['Brand','Quantity','Price']]\n",
    "total_stock2 = total_stock2.groupby(['Brand','Price']).sum().reset_index()\n",
    "total_stock = pd.concat([total_stock1, total_stock2]).reset_index(drop=True)\n",
    "total_stock"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11297b2e",
   "metadata": {
    "papermill": {
     "duration": 0.023406,
     "end_time": "2024-07-06T20:08:52.589916",
     "exception": false,
     "start_time": "2024-07-06T20:08:52.566510",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Update each inventory item's price to be the average of prices it actually has sold for. If never sold, keep listed price as-is."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b79bd8fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:52.639093Z",
     "iopub.status.busy": "2024-07-06T20:08:52.638735Z",
     "iopub.status.idle": "2024-07-06T20:08:52.789485Z",
     "shell.execute_reply": "2024-07-06T20:08:52.788457Z"
    },
    "papermill": {
     "duration": 0.179304,
     "end_time": "2024-07-06T20:08:52.792824",
     "exception": false,
     "start_time": "2024-07-06T20:08:52.613520",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sales_avg_price = sales[['Brand','SalesQuantity','SalesDollars']].groupby(['Brand']).sum().reset_index()\n",
    "sales_avg_price['avg_price'] = sales_avg_price.SalesDollars.div(sales_avg_price.SalesQuantity)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ece1f9cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:52.842578Z",
     "iopub.status.busy": "2024-07-06T20:08:52.842195Z",
     "iopub.status.idle": "2024-07-06T20:08:52.925404Z",
     "shell.execute_reply": "2024-07-06T20:08:52.924199Z"
    },
    "papermill": {
     "duration": 0.111332,
     "end_time": "2024-07-06T20:08:52.928075",
     "exception": false,
     "start_time": "2024-07-06T20:08:52.816743",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>avg_price</th>\n",
       "      <th>Quantity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100</td>\n",
       "      <td>159.990000</td>\n",
       "      <td>183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>16.679655</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10009</td>\n",
       "      <td>5.990000</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>5.990000</td>\n",
       "      <td>8352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10010</td>\n",
       "      <td>5.990000</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Brand   avg_price  Quantity\n",
       "0    100  159.990000       183\n",
       "1   1000   16.679655        62\n",
       "2  10009    5.990000        48\n",
       "3   1001    5.990000      8352\n",
       "4  10010    5.990000        24"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_stock_sold_prices = pd.merge(total_stock, sales_avg_price[['Brand','avg_price']], on='Brand',how='left')\n",
    "total_stock_sold_prices.avg_price = total_stock_sold_prices.avg_price.fillna(total_stock_sold_prices.Price)\n",
    "total_stock_sold_prices = total_stock_sold_prices.drop('Price',axis=1)\n",
    "total_stock_sold_prices = total_stock_sold_prices.groupby(['Brand','avg_price']).sum().reset_index()\n",
    "total_stock_sold_prices = total_stock_sold_prices.groupby('Brand').agg({'avg_price':'min','Quantity':'sum'}).reset_index()\n",
    "total_stock_sold_prices.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d26428d",
   "metadata": {
    "papermill": {
     "duration": 0.024697,
     "end_time": "2024-07-06T20:08:52.977052",
     "exception": false,
     "start_time": "2024-07-06T20:08:52.952355",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Create total sales dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6a9be9b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:53.027900Z",
     "iopub.status.busy": "2024-07-06T20:08:53.026997Z",
     "iopub.status.idle": "2024-07-06T20:08:53.176560Z",
     "shell.execute_reply": "2024-07-06T20:08:53.175500Z"
    },
    "papermill": {
     "duration": 0.177817,
     "end_time": "2024-07-06T20:08:53.179152",
     "exception": false,
     "start_time": "2024-07-06T20:08:53.001335",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>total_value</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>avg_price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100</td>\n",
       "      <td>1119.93</td>\n",
       "      <td>7</td>\n",
       "      <td>159.990000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>483.71</td>\n",
       "      <td>29</td>\n",
       "      <td>16.679655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>5109.47</td>\n",
       "      <td>853</td>\n",
       "      <td>5.990000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10021</td>\n",
       "      <td>968.21</td>\n",
       "      <td>79</td>\n",
       "      <td>12.255823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1003</td>\n",
       "      <td>403.82</td>\n",
       "      <td>18</td>\n",
       "      <td>22.434444</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Brand  total_value  Quantity   avg_price\n",
       "0    100      1119.93         7  159.990000\n",
       "1   1000       483.71        29   16.679655\n",
       "2   1001      5109.47       853    5.990000\n",
       "3  10021       968.21        79   12.255823\n",
       "4   1003       403.82        18   22.434444"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_sales_by_brand = sales.groupby('Brand').agg(total_value =('SalesDollars','sum'),Quantity = ('SalesQuantity','sum')).reset_index()\n",
    "total_sales_by_brand['avg_price'] = total_sales_by_brand.total_value.div(total_sales_by_brand.Quantity)\n",
    "total_sales_by_brand.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d527914",
   "metadata": {
    "papermill": {
     "duration": 0.023733,
     "end_time": "2024-07-06T20:08:53.227072",
     "exception": false,
     "start_time": "2024-07-06T20:08:53.203339",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Create total profit dataset by subtracting purchase price from sale price."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d5e67bb6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:53.277480Z",
     "iopub.status.busy": "2024-07-06T20:08:53.277068Z",
     "iopub.status.idle": "2024-07-06T20:08:53.601283Z",
     "shell.execute_reply": "2024-07-06T20:08:53.600042Z"
    },
    "papermill": {
     "duration": 0.352268,
     "end_time": "2024-07-06T20:08:53.603852",
     "exception": false,
     "start_time": "2024-07-06T20:08:53.251584",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>total_paid</th>\n",
       "      <th>avg_paid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100</td>\n",
       "      <td>150</td>\n",
       "      <td>18043.50</td>\n",
       "      <td>120.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>15</td>\n",
       "      <td>174.30</td>\n",
       "      <td>11.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10009</td>\n",
       "      <td>48</td>\n",
       "      <td>198.24</td>\n",
       "      <td>4.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>7177</td>\n",
       "      <td>30717.56</td>\n",
       "      <td>4.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10010</td>\n",
       "      <td>24</td>\n",
       "      <td>92.64</td>\n",
       "      <td>3.86</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Brand  Quantity  total_paid  avg_paid\n",
       "0    100       150    18043.50    120.29\n",
       "1   1000        15      174.30     11.62\n",
       "2  10009        48      198.24      4.13\n",
       "3   1001      7177    30717.56      4.28\n",
       "4  10010        24       92.64      3.86"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paid_by_brand = purchases_with_prices.groupby('Brand').agg(Quantity=('Quantity','sum'),total_paid = ('Dollars','sum')).reset_index()\n",
    "paid_by_brand['avg_paid'] = paid_by_brand.total_paid.div(paid_by_brand.Quantity)\n",
    "paid_by_brand.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02138936",
   "metadata": {
    "papermill": {
     "duration": 0.024036,
     "end_time": "2024-07-06T20:08:53.652772",
     "exception": false,
     "start_time": "2024-07-06T20:08:53.628736",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "About 500 brands were sold that don't have a recorded purchase price.\\\n",
    "Rather than mark them as 100% profit, I estimate a probable purchase price from the mean of all known markups, around 53%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7b3212ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:53.704256Z",
     "iopub.status.busy": "2024-07-06T20:08:53.703835Z",
     "iopub.status.idle": "2024-07-06T20:08:53.735955Z",
     "shell.execute_reply": "2024-07-06T20:08:53.734712Z"
    },
    "papermill": {
     "duration": 0.061225,
     "end_time": "2024-07-06T20:08:53.738509",
     "exception": false,
     "start_time": "2024-07-06T20:08:53.677284",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>total_value</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>avg_price</th>\n",
       "      <th>avg_paid</th>\n",
       "      <th>avg_markup</th>\n",
       "      <th>avg_profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100</td>\n",
       "      <td>277.90</td>\n",
       "      <td>7</td>\n",
       "      <td>159.990000</td>\n",
       "      <td>120.29</td>\n",
       "      <td>0.330036</td>\n",
       "      <td>39.700000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>146.73</td>\n",
       "      <td>29</td>\n",
       "      <td>16.679655</td>\n",
       "      <td>11.62</td>\n",
       "      <td>0.435426</td>\n",
       "      <td>5.059655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>1458.63</td>\n",
       "      <td>853</td>\n",
       "      <td>5.990000</td>\n",
       "      <td>4.28</td>\n",
       "      <td>0.399533</td>\n",
       "      <td>1.710000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10021</td>\n",
       "      <td>344.90</td>\n",
       "      <td>79</td>\n",
       "      <td>12.255823</td>\n",
       "      <td>7.89</td>\n",
       "      <td>0.553336</td>\n",
       "      <td>4.365823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1003</td>\n",
       "      <td>103.94</td>\n",
       "      <td>18</td>\n",
       "      <td>22.434444</td>\n",
       "      <td>16.66</td>\n",
       "      <td>0.346605</td>\n",
       "      <td>5.774444</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Brand  total_value  Quantity   avg_price  avg_paid  avg_markup  avg_profit\n",
       "0    100       277.90         7  159.990000    120.29    0.330036   39.700000\n",
       "1   1000       146.73        29   16.679655     11.62    0.435426    5.059655\n",
       "2   1001      1458.63       853    5.990000      4.28    0.399533    1.710000\n",
       "3  10021       344.90        79   12.255823      7.89    0.553336    4.365823\n",
       "4   1003       103.94        18   22.434444     16.66    0.346605    5.774444"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_profit_by_brand = pd.merge(total_sales_by_brand,paid_by_brand[['Brand','avg_paid']],on='Brand',how='left')\n",
    "total_profit_by_brand['avg_markup'] = total_profit_by_brand.avg_price.div(total_profit_by_brand.avg_paid).sub(1)\n",
    "total_profit_by_brand.avg_paid = total_profit_by_brand.avg_paid.fillna(total_profit_by_brand.avg_price.mul(1-total_profit_by_brand.avg_markup.mean()))\n",
    "total_profit_by_brand['avg_profit'] = total_profit_by_brand.avg_price.sub(total_profit_by_brand.avg_paid)\n",
    "total_profit_by_brand['total_value'] = total_profit_by_brand.Quantity.mul(total_profit_by_brand.avg_profit)\n",
    "total_profit_by_brand.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69d028ac",
   "metadata": {
    "papermill": {
     "duration": 0.024581,
     "end_time": "2024-07-06T20:08:53.850777",
     "exception": false,
     "start_time": "2024-07-06T20:08:53.826196",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 1: Initial observations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f7ad1872",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:53.902638Z",
     "iopub.status.busy": "2024-07-06T20:08:53.902242Z",
     "iopub.status.idle": "2024-07-06T20:08:53.916703Z",
     "shell.execute_reply": "2024-07-06T20:08:53.915420Z"
    },
    "papermill": {
     "duration": 0.043514,
     "end_time": "2024-07-06T20:08:53.919458",
     "exception": false,
     "start_time": "2024-07-06T20:08:53.875944",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total SKUs: 11,485\n",
      "Total current stock: 4,885,776\n",
      "Total items sold (two months): 2,451,169\n",
      "Total revenue: $33,139,375.29\n",
      "Total profit margin: $10,862,425.70\n",
      "Items were sold for prices between $0.49 and $4,999.99\n"
     ]
    }
   ],
   "source": [
    "print(f'Total SKUs: {len(total_stock_sold_prices):,}')\n",
    "print(f'Total current stock: {end_inv.onHand.sum():,}')\n",
    "print(f'Total items sold (two months): {total_profit_by_brand.Quantity.sum():,}')\n",
    "print(f'Total revenue: ${total_sales_by_brand.total_value.sum():,.2f}')\n",
    "print(f'Total profit margin: ${total_profit_by_brand.total_value.sum():,.2f}')\n",
    "print(f'Items were sold for prices between ${sales.SalesPrice.min():,.2f} and ${sales.SalesPrice.max():,.2f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4e0b3299",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:53.972074Z",
     "iopub.status.busy": "2024-07-06T20:08:53.971656Z",
     "iopub.status.idle": "2024-07-06T20:08:54.886827Z",
     "shell.execute_reply": "2024-07-06T20:08:54.885598Z"
    },
    "papermill": {
     "duration": 0.945011,
     "end_time": "2024-07-06T20:08:54.890049",
     "exception": false,
     "start_time": "2024-07-06T20:08:53.945038",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1300x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "top_5_stocked = end_inv.groupby('Brand').agg(Description = ('Description','first'), current_stock = ('onHand','sum')).sort_values('current_stock',ascending=False).reset_index().head()\n",
    "top_5_stocked = top_5_stocked.sort_values('current_stock',ascending=True)\n",
    "top_5_profit = total_profit_by_brand.sort_values('total_value',ascending=False).head()[['Brand','total_value']].reset_index(drop=True)\n",
    "top_5_profit = pd.merge(top_5_profit,sales[['Brand','Description']].drop_duplicates(),on='Brand',how='left')\n",
    "top_5_profit = top_5_profit.sort_values('total_value',ascending=True)\n",
    "\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2)\n",
    "fig.set_size_inches(13, 6)\n",
    "fig.tight_layout(pad=12)\n",
    "\n",
    "ax1.barh(top_5_stocked.Description,top_5_stocked.current_stock)\n",
    "ax1.xaxis.set_major_formatter('{x:,.0f}')\n",
    "ax1.set_title('Top 5 SKUs by current stock')\n",
    "ticks = ax1.get_xticks()\n",
    "xlabels = [f'{x/1000:,.0f}k' for x in ticks]\n",
    "ax1.xaxis.set_ticks(ticks[:-1])\n",
    "ax1.set_xticklabels(xlabels[:-1])\n",
    "\n",
    "ax2.barh(top_5_profit.Description,top_5_profit.total_value)\n",
    "ticks = ax2.get_xticks()\n",
    "xlabels = [f'${x/1000:,.0f}k' for x in ticks]\n",
    "ax2.xaxis.set_ticks(ticks[:-1])\n",
    "ax2.set_xticklabels(xlabels[:-1])\n",
    "ax2.set_title('Top 5 SKUs by profit')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4cae7db7",
   "metadata": {
    "papermill": {
     "duration": 0.025833,
     "end_time": "2024-07-06T20:08:54.942386",
     "exception": false,
     "start_time": "2024-07-06T20:08:54.916553",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 2: ABC analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "478a016e",
   "metadata": {
    "papermill": {
     "duration": 0.025955,
     "end_time": "2024-07-06T20:08:54.994500",
     "exception": false,
     "start_time": "2024-07-06T20:08:54.968545",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "ABC analysis is used to divide SKUs into high, medium, and low value to the company.\\\n",
    "It can be calculated from total stock, total revenue, or total profit.\\\n",
    "I've chosen to use total profit, but the code for the other options is provided here as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "dd687e63",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:55.049876Z",
     "iopub.status.busy": "2024-07-06T20:08:55.049487Z",
     "iopub.status.idle": "2024-07-06T20:08:55.055008Z",
     "shell.execute_reply": "2024-07-06T20:08:55.053791Z"
    },
    "papermill": {
     "duration": 0.03644,
     "end_time": "2024-07-06T20:08:55.057613",
     "exception": false,
     "start_time": "2024-07-06T20:08:55.021173",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "##Use total stock to determine ABC\n",
    "#df = total_stock_sold_prices\n",
    "#df['total_value'] = df.avg_price*df.Quantity\n",
    "\n",
    "##Use revenue to determine ABC\n",
    "#df = total_sales_by_brand\n",
    "\n",
    "##Use profit from sales to determine ABC\n",
    "df = total_profit_by_brand"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0a0c362",
   "metadata": {
    "papermill": {
     "duration": 0.026291,
     "end_time": "2024-07-06T20:08:55.110538",
     "exception": false,
     "start_time": "2024-07-06T20:08:55.084247",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Add SKUs to dataset that don't appear in sales dataset, if necessary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3c1530dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:55.164596Z",
     "iopub.status.busy": "2024-07-06T20:08:55.164088Z",
     "iopub.status.idle": "2024-07-06T20:08:55.210862Z",
     "shell.execute_reply": "2024-07-06T20:08:55.209597Z"
    },
    "papermill": {
     "duration": 0.076992,
     "end_time": "2024-07-06T20:08:55.213554",
     "exception": false,
     "start_time": "2024-07-06T20:08:55.136562",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>total_value</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>avg_price</th>\n",
       "      <th>avg_paid</th>\n",
       "      <th>avg_markup</th>\n",
       "      <th>avg_profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100</td>\n",
       "      <td>277.90</td>\n",
       "      <td>7.0</td>\n",
       "      <td>159.990000</td>\n",
       "      <td>120.29</td>\n",
       "      <td>0.330036</td>\n",
       "      <td>39.700000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>146.73</td>\n",
       "      <td>29.0</td>\n",
       "      <td>16.679655</td>\n",
       "      <td>11.62</td>\n",
       "      <td>0.435426</td>\n",
       "      <td>5.059655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10009</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>1458.63</td>\n",
       "      <td>853.0</td>\n",
       "      <td>5.990000</td>\n",
       "      <td>4.28</td>\n",
       "      <td>0.399533</td>\n",
       "      <td>1.710000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10010</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11480</th>\n",
       "      <td>994</td>\n",
       "      <td>201.04</td>\n",
       "      <td>28.0</td>\n",
       "      <td>21.990000</td>\n",
       "      <td>14.81</td>\n",
       "      <td>0.484808</td>\n",
       "      <td>7.180000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11481</th>\n",
       "      <td>995</td>\n",
       "      <td>142.00</td>\n",
       "      <td>24.0</td>\n",
       "      <td>21.906667</td>\n",
       "      <td>15.99</td>\n",
       "      <td>0.370023</td>\n",
       "      <td>5.916667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11482</th>\n",
       "      <td>996</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>299.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11483</th>\n",
       "      <td>998</td>\n",
       "      <td>242.60</td>\n",
       "      <td>20.0</td>\n",
       "      <td>30.640000</td>\n",
       "      <td>18.51</td>\n",
       "      <td>0.655321</td>\n",
       "      <td>12.130000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11484</th>\n",
       "      <td>999</td>\n",
       "      <td>693.45</td>\n",
       "      <td>23.0</td>\n",
       "      <td>119.990000</td>\n",
       "      <td>89.84</td>\n",
       "      <td>0.335597</td>\n",
       "      <td>30.150000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11485 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Brand  total_value  Quantity   avg_price  avg_paid  avg_markup  \\\n",
       "0        100       277.90       7.0  159.990000    120.29    0.330036   \n",
       "1       1000       146.73      29.0   16.679655     11.62    0.435426   \n",
       "2      10009         0.00       0.0    5.990000       NaN         NaN   \n",
       "3       1001      1458.63     853.0    5.990000      4.28    0.399533   \n",
       "4      10010         0.00       0.0    5.990000       NaN         NaN   \n",
       "...      ...          ...       ...         ...       ...         ...   \n",
       "11480    994       201.04      28.0   21.990000     14.81    0.484808   \n",
       "11481    995       142.00      24.0   21.906667     15.99    0.370023   \n",
       "11482    996         0.00       0.0  299.990000       NaN         NaN   \n",
       "11483    998       242.60      20.0   30.640000     18.51    0.655321   \n",
       "11484    999       693.45      23.0  119.990000     89.84    0.335597   \n",
       "\n",
       "       avg_profit  \n",
       "0       39.700000  \n",
       "1        5.059655  \n",
       "2             NaN  \n",
       "3        1.710000  \n",
       "4             NaN  \n",
       "...           ...  \n",
       "11480    7.180000  \n",
       "11481    5.916667  \n",
       "11482         NaN  \n",
       "11483   12.130000  \n",
       "11484   30.150000  \n",
       "\n",
       "[11485 rows x 7 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "if df.Brand.nunique() < total_stock_sold_prices.Brand.nunique():\n",
    "    df = pd.merge(total_stock_sold_prices[['Brand','avg_price']],df,on='Brand',how='left').reset_index(drop=True)\n",
    "    df.total_value = df.total_value.fillna(0)\n",
    "    df.Quantity = df.Quantity.fillna(0)\n",
    "    df.avg_price_y = df.avg_price_y.fillna(df.avg_price_x)\n",
    "    df = df.drop('avg_price_x',axis=1)\n",
    "    df=df.rename(columns={'avg_price_y':'avg_price'})\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f3388fa",
   "metadata": {
    "papermill": {
     "duration": 0.026686,
     "end_time": "2024-07-06T20:08:55.266890",
     "exception": false,
     "start_time": "2024-07-06T20:08:55.240204",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Add current stock."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3cc115d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:55.322520Z",
     "iopub.status.busy": "2024-07-06T20:08:55.321583Z",
     "iopub.status.idle": "2024-07-06T20:08:55.399682Z",
     "shell.execute_reply": "2024-07-06T20:08:55.398493Z"
    },
    "papermill": {
     "duration": 0.108963,
     "end_time": "2024-07-06T20:08:55.402501",
     "exception": false,
     "start_time": "2024-07-06T20:08:55.293538",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>total_value</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>avg_price</th>\n",
       "      <th>avg_paid</th>\n",
       "      <th>avg_markup</th>\n",
       "      <th>avg_profit</th>\n",
       "      <th>current_stock</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100</td>\n",
       "      <td>277.90</td>\n",
       "      <td>7.0</td>\n",
       "      <td>159.990000</td>\n",
       "      <td>120.29</td>\n",
       "      <td>0.330036</td>\n",
       "      <td>39.700000</td>\n",
       "      <td>59.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>146.73</td>\n",
       "      <td>29.0</td>\n",
       "      <td>16.679655</td>\n",
       "      <td>11.62</td>\n",
       "      <td>0.435426</td>\n",
       "      <td>5.059655</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10009</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>1458.63</td>\n",
       "      <td>853.0</td>\n",
       "      <td>5.990000</td>\n",
       "      <td>4.28</td>\n",
       "      <td>0.399533</td>\n",
       "      <td>1.710000</td>\n",
       "      <td>425.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10010</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Brand  total_value  Quantity   avg_price  avg_paid  avg_markup  avg_profit  \\\n",
       "0    100       277.90       7.0  159.990000    120.29    0.330036   39.700000   \n",
       "1   1000       146.73      29.0   16.679655     11.62    0.435426    5.059655   \n",
       "2  10009         0.00       0.0    5.990000       NaN         NaN         NaN   \n",
       "3   1001      1458.63     853.0    5.990000      4.28    0.399533    1.710000   \n",
       "4  10010         0.00       0.0    5.990000       NaN         NaN         NaN   \n",
       "\n",
       "   current_stock  \n",
       "0           59.0  \n",
       "1            0.0  \n",
       "2           13.0  \n",
       "3          425.0  \n",
       "4           18.0  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "current_stock_df = end_inv.groupby('Brand').agg(current_stock = ('onHand','sum')).reset_index()\n",
    "df = pd.merge(df,current_stock_df,on='Brand',how='left')\n",
    "df.current_stock = df.current_stock.fillna(0)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37de8599",
   "metadata": {
    "papermill": {
     "duration": 0.026381,
     "end_time": "2024-07-06T20:08:55.458403",
     "exception": false,
     "start_time": "2024-07-06T20:08:55.432022",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Here I define \"A\" (high value) as the most valuable SKUs that make up 80% of the company's profit, \"B\" as the next 15%, and \"C\" as the final 5%.\\\n",
    "These numbers could be tweaked."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a1e16338",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:55.513250Z",
     "iopub.status.busy": "2024-07-06T20:08:55.512812Z",
     "iopub.status.idle": "2024-07-06T20:08:55.519225Z",
     "shell.execute_reply": "2024-07-06T20:08:55.517973Z"
    },
    "papermill": {
     "duration": 0.036853,
     "end_time": "2024-07-06T20:08:55.521892",
     "exception": false,
     "start_time": "2024-07-06T20:08:55.485039",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def ABC(perc):\n",
    "    if perc > 0 and perc < 0.8:\n",
    "        return 'A'\n",
    "    elif perc >= 0.8 and perc < 0.95:\n",
    "        return 'B'\n",
    "    elif perc >= 0.95:\n",
    "        return 'C'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ee2dc167",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:55.576983Z",
     "iopub.status.busy": "2024-07-06T20:08:55.576569Z",
     "iopub.status.idle": "2024-07-06T20:08:55.618705Z",
     "shell.execute_reply": "2024-07-06T20:08:55.617363Z"
    },
    "papermill": {
     "duration": 0.072618,
     "end_time": "2024-07-06T20:08:55.621505",
     "exception": false,
     "start_time": "2024-07-06T20:08:55.548887",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>total_value</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>avg_price</th>\n",
       "      <th>avg_paid</th>\n",
       "      <th>avg_markup</th>\n",
       "      <th>avg_profit</th>\n",
       "      <th>current_stock</th>\n",
       "      <th>abc_class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4261</td>\n",
       "      <td>1.177563e+05</td>\n",
       "      <td>20226.0</td>\n",
       "      <td>21.992027</td>\n",
       "      <td>16.17</td>\n",
       "      <td>3.600511e-01</td>\n",
       "      <td>5.822027e+00</td>\n",
       "      <td>16769.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3545</td>\n",
       "      <td>9.764030e+04</td>\n",
       "      <td>11883.0</td>\n",
       "      <td>30.106806</td>\n",
       "      <td>21.89</td>\n",
       "      <td>3.753680e-01</td>\n",
       "      <td>8.216806e+00</td>\n",
       "      <td>16770.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1233</td>\n",
       "      <td>9.309816e+04</td>\n",
       "      <td>9578.0</td>\n",
       "      <td>35.990000</td>\n",
       "      <td>26.27</td>\n",
       "      <td>3.700038e-01</td>\n",
       "      <td>9.720000e+00</td>\n",
       "      <td>15047.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8068</td>\n",
       "      <td>8.404775e+04</td>\n",
       "      <td>11189.0</td>\n",
       "      <td>25.751641</td>\n",
       "      <td>18.24</td>\n",
       "      <td>4.118224e-01</td>\n",
       "      <td>7.511641e+00</td>\n",
       "      <td>15608.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3405</td>\n",
       "      <td>6.174540e+04</td>\n",
       "      <td>9203.0</td>\n",
       "      <td>29.899269</td>\n",
       "      <td>23.19</td>\n",
       "      <td>2.893173e-01</td>\n",
       "      <td>6.709269e+00</td>\n",
       "      <td>12268.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11480</th>\n",
       "      <td>16321</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11481</th>\n",
       "      <td>26464</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>130.0</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11482</th>\n",
       "      <td>21440</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>869.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.0</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11483</th>\n",
       "      <td>1757</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>159.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.0</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11484</th>\n",
       "      <td>2729</td>\n",
       "      <td>-3.552714e-15</td>\n",
       "      <td>1.0</td>\n",
       "      <td>19.990000</td>\n",
       "      <td>19.99</td>\n",
       "      <td>-2.220446e-16</td>\n",
       "      <td>-3.552714e-15</td>\n",
       "      <td>400.0</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11485 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Brand   total_value  Quantity   avg_price  avg_paid    avg_markup  \\\n",
       "0       4261  1.177563e+05   20226.0   21.992027     16.17  3.600511e-01   \n",
       "1       3545  9.764030e+04   11883.0   30.106806     21.89  3.753680e-01   \n",
       "2       1233  9.309816e+04    9578.0   35.990000     26.27  3.700038e-01   \n",
       "3       8068  8.404775e+04   11189.0   25.751641     18.24  4.118224e-01   \n",
       "4       3405  6.174540e+04    9203.0   29.899269     23.19  2.893173e-01   \n",
       "...      ...           ...       ...         ...       ...           ...   \n",
       "11480  16321  0.000000e+00       0.0   25.990000       NaN           NaN   \n",
       "11481  26464  0.000000e+00       0.0   18.990000       NaN           NaN   \n",
       "11482  21440  0.000000e+00       0.0  869.990000       NaN           NaN   \n",
       "11483   1757  0.000000e+00       0.0  159.990000       NaN           NaN   \n",
       "11484   2729 -3.552714e-15       1.0   19.990000     19.99 -2.220446e-16   \n",
       "\n",
       "         avg_profit  current_stock abc_class  \n",
       "0      5.822027e+00        16769.0         A  \n",
       "1      8.216806e+00        16770.0         A  \n",
       "2      9.720000e+00        15047.0         A  \n",
       "3      7.511641e+00        15608.0         A  \n",
       "4      6.709269e+00        12268.0         A  \n",
       "...             ...            ...       ...  \n",
       "11480           NaN            0.0         C  \n",
       "11481           NaN          130.0         C  \n",
       "11482           NaN           24.0         C  \n",
       "11483           NaN           24.0         C  \n",
       "11484 -3.552714e-15          400.0         C  \n",
       "\n",
       "[11485 rows x 9 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=df.sort_values('total_value',ascending=False)\n",
    "df['running_cumulative_value'] = df['total_value'].cumsum()\n",
    "df['total_total_value'] = df['total_value'].sum()\n",
    "df['running_perc'] =  df['running_cumulative_value']/df['total_total_value']\n",
    "df['abc_class'] = df['running_perc'].apply(ABC)\n",
    "df = df.drop(['running_cumulative_value','total_total_value','running_perc'],axis=1).reset_index(drop=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80ce281a",
   "metadata": {
    "papermill": {
     "duration": 0.026705,
     "end_time": "2024-07-06T20:08:55.675369",
     "exception": false,
     "start_time": "2024-07-06T20:08:55.648664",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Display relative proportions of A, B, and C class inventory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b382de45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:55.732343Z",
     "iopub.status.busy": "2024-07-06T20:08:55.731917Z",
     "iopub.status.idle": "2024-07-06T20:08:55.769245Z",
     "shell.execute_reply": "2024-07-06T20:08:55.768111Z"
    },
    "papermill": {
     "duration": 0.069255,
     "end_time": "2024-07-06T20:08:55.771660",
     "exception": false,
     "start_time": "2024-07-06T20:08:55.702405",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>abc_class</th>\n",
       "      <th>SKUs</th>\n",
       "      <th>Quantity_sold</th>\n",
       "      <th>total_profit</th>\n",
       "      <th>current_stock</th>\n",
       "      <th>perc_quantity</th>\n",
       "      <th>perc_profit</th>\n",
       "      <th>perc_SKUs</th>\n",
       "      <th>perc_current_stock</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A</td>\n",
       "      <td>1532</td>\n",
       "      <td>1852112.0</td>\n",
       "      <td>$8,688,772.54</td>\n",
       "      <td>2887033.0</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.80</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>B</td>\n",
       "      <td>1836</td>\n",
       "      <td>454468.0</td>\n",
       "      <td>$1,630,395.83</td>\n",
       "      <td>1008831.0</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>C</td>\n",
       "      <td>8117</td>\n",
       "      <td>144589.0</td>\n",
       "      <td>$543,257.33</td>\n",
       "      <td>989912.0</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.71</td>\n",
       "      <td>0.20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  abc_class  SKUs  Quantity_sold   total_profit  current_stock  perc_quantity  \\\n",
       "0         A  1532      1852112.0  $8,688,772.54      2887033.0           0.76   \n",
       "1         B  1836       454468.0  $1,630,395.83      1008831.0           0.19   \n",
       "2         C  8117       144589.0    $543,257.33       989912.0           0.06   \n",
       "\n",
       "   perc_profit  perc_SKUs  perc_current_stock  \n",
       "0         0.80       0.13                0.59  \n",
       "1         0.15       0.16                0.21  \n",
       "2         0.05       0.71                0.20  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_by_class = df.groupby('abc_class').agg(\n",
    "    SKUs = ('abc_class','count'),\n",
    "    Quantity_sold = ('Quantity','sum'),\n",
    "    total_profit = ('total_value', 'sum'),\n",
    "    current_stock = ('current_stock','sum')).reset_index()\n",
    "df_by_class['perc_quantity'] = df_by_class.Quantity_sold.div(df_by_class.Quantity_sold.sum()).round(2)\n",
    "df_by_class['perc_profit'] = df_by_class.total_profit.div(df_by_class.total_profit.sum()).round(2)\n",
    "df_by_class['perc_SKUs'] = df_by_class.SKUs.div(df_by_class.SKUs.sum()).round(2)\n",
    "df_by_class['perc_current_stock'] = df_by_class.current_stock.div(df_by_class.current_stock.sum()).round(2)\n",
    "df_by_class.total_profit = df_by_class.total_profit.apply(lambda x: \"${:,.2f}\".format(x))\n",
    "df_by_class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "eba54eb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:55.830208Z",
     "iopub.status.busy": "2024-07-06T20:08:55.829785Z",
     "iopub.status.idle": "2024-07-06T20:08:56.244816Z",
     "shell.execute_reply": "2024-07-06T20:08:56.243709Z"
    },
    "papermill": {
     "duration": 0.449996,
     "end_time": "2024-07-06T20:08:56.250897",
     "exception": false,
     "start_time": "2024-07-06T20:08:55.800901",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x700 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2)\n",
    "fig.set_size_inches(10, 7)\n",
    "ax1.pie(df_by_class.perc_SKUs,labels=df_by_class.abc_class,autopct='%.0f%%',colors=['tab:green','gold','tab:red'])\n",
    "ax1.set_title('SKUs')\n",
    "ax2.pie(df_by_class.perc_profit,labels=df_by_class.abc_class,autopct='%.0f%%',colors=['tab:green','gold','tab:red'])\n",
    "ax2.set_title('Profit')\n",
    "ax3.pie(df_by_class.perc_quantity,labels=df_by_class.abc_class,autopct='%.0f%%',colors=['tab:green','gold','tab:red'])\n",
    "ax3.set_title('Quantity sold')\n",
    "ax4.pie(df_by_class.perc_current_stock,labels=df_by_class.abc_class,autopct='%.0f%%',colors=['tab:green','gold','tab:red'])\n",
    "ax4.set_title('Current stock')\n",
    "fig.suptitle('ABC proportions', fontsize=20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91d5dbb6",
   "metadata": {
    "papermill": {
     "duration": 0.027755,
     "end_time": "2024-07-06T20:08:56.321911",
     "exception": false,
     "start_time": "2024-07-06T20:08:56.294156",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Notably, A class items form the great majority of quantity sold, while representing only 13% of all SKUs. C class is the opposite, at 71% of SKUs but only 6% of quantity sold. While it is typical for C class SKUs to outnumber A class SKUs, this is a bit extreme. This company should investigate if it can cut some of its C class offerings and/or expand its A class. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10fdd49a",
   "metadata": {
    "papermill": {
     "duration": 0.027831,
     "end_time": "2024-07-06T20:08:56.377921",
     "exception": false,
     "start_time": "2024-07-06T20:08:56.350090",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 3: XYZ analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4eca49b5",
   "metadata": {
    "papermill": {
     "duration": 0.028506,
     "end_time": "2024-07-06T20:08:56.434805",
     "exception": false,
     "start_time": "2024-07-06T20:08:56.406299",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "ABC analysis is powerful, but it becomes more helpful when combined with XYZ analysis,\\\n",
    "which categorizes inventory into high, medium, and low demand predictability.\\\n",
    "I will calculate predictability based on the covariance of sale quantities.\\\n",
    "The first step is to list how much quantity of each SKU was sold each day, even if it was zero.\\\n",
    "(Ideally this would account for when a SKU is sold out, but I'll leave that for a future project.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6de21bf0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:56.493867Z",
     "iopub.status.busy": "2024-07-06T20:08:56.492919Z",
     "iopub.status.idle": "2024-07-06T20:08:57.200172Z",
     "shell.execute_reply": "2024-07-06T20:08:57.199000Z"
    },
    "papermill": {
     "duration": 0.739609,
     "end_time": "2024-07-06T20:08:57.202814",
     "exception": false,
     "start_time": "2024-07-06T20:08:56.463205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>SalesDate</th>\n",
       "      <th>SalesQuantity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100</td>\n",
       "      <td>2016-01-01</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>100</td>\n",
       "      <td>2016-01-02</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>100</td>\n",
       "      <td>2016-01-03</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>100</td>\n",
       "      <td>2016-01-04</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>100</td>\n",
       "      <td>2016-01-05</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Brand  SalesDate  SalesQuantity\n",
       "0   100 2016-01-01            0.0\n",
       "1   100 2016-01-02            1.0\n",
       "2   100 2016-01-03            0.0\n",
       "3   100 2016-01-04            0.0\n",
       "4   100 2016-01-05            0.0"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "simp_sales = sales[['Brand','SalesDate','SalesQuantity']].groupby(['SalesDate','Brand']).sum().reset_index()\n",
    "dates = pd.merge(sales.Brand.drop_duplicates(),sales.SalesDate.drop_duplicates(),how='cross').sort_values(['Brand','SalesDate'])\n",
    "full_sales = pd.merge(dates,simp_sales, on=['Brand','SalesDate'],how='left').fillna(0)\n",
    "full_sales.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0befba0f",
   "metadata": {
    "papermill": {
     "duration": 0.028383,
     "end_time": "2024-07-06T20:08:57.260091",
     "exception": false,
     "start_time": "2024-07-06T20:08:57.231708",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Calculate covariance by dividing the sale quantity's standard deviation by its mean."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c481b045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:57.319512Z",
     "iopub.status.busy": "2024-07-06T20:08:57.319097Z",
     "iopub.status.idle": "2024-07-06T20:08:57.400719Z",
     "shell.execute_reply": "2024-07-06T20:08:57.399702Z"
    },
    "papermill": {
     "duration": 0.114464,
     "end_time": "2024-07-06T20:08:57.403202",
     "exception": false,
     "start_time": "2024-07-06T20:08:57.288738",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>sales_mean</th>\n",
       "      <th>sales_std</th>\n",
       "      <th>sales_cov</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5080</th>\n",
       "      <td>3687</td>\n",
       "      <td>28.666667</td>\n",
       "      <td>15.942340</td>\n",
       "      <td>0.556128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>324</th>\n",
       "      <td>12213</td>\n",
       "      <td>22.516667</td>\n",
       "      <td>13.420818</td>\n",
       "      <td>0.596039</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>327</th>\n",
       "      <td>12220</td>\n",
       "      <td>34.250000</td>\n",
       "      <td>21.530920</td>\n",
       "      <td>0.628640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3919</th>\n",
       "      <td>26463</td>\n",
       "      <td>20.166667</td>\n",
       "      <td>13.267990</td>\n",
       "      <td>0.657917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5944</th>\n",
       "      <td>4359</td>\n",
       "      <td>19.183333</td>\n",
       "      <td>12.829378</td>\n",
       "      <td>0.668777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7143</th>\n",
       "      <td>788</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>4.647580</td>\n",
       "      <td>7.745967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4770</th>\n",
       "      <td>34509</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>3.098387</td>\n",
       "      <td>7.745967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2284</th>\n",
       "      <td>21216</td>\n",
       "      <td>0.150000</td>\n",
       "      <td>1.161895</td>\n",
       "      <td>7.745967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6219</th>\n",
       "      <td>45875</td>\n",
       "      <td>0.083333</td>\n",
       "      <td>0.645497</td>\n",
       "      <td>7.745967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5428</th>\n",
       "      <td>39400</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>1.290994</td>\n",
       "      <td>7.745967</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7658 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Brand  sales_mean  sales_std  sales_cov\n",
       "5080   3687   28.666667  15.942340   0.556128\n",
       "324   12213   22.516667  13.420818   0.596039\n",
       "327   12220   34.250000  21.530920   0.628640\n",
       "3919  26463   20.166667  13.267990   0.657917\n",
       "5944   4359   19.183333  12.829378   0.668777\n",
       "...     ...         ...        ...        ...\n",
       "7143    788    0.600000   4.647580   7.745967\n",
       "4770  34509    0.400000   3.098387   7.745967\n",
       "2284  21216    0.150000   1.161895   7.745967\n",
       "6219  45875    0.083333   0.645497   7.745967\n",
       "5428  39400    0.166667   1.290994   7.745967\n",
       "\n",
       "[7658 rows x 4 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales_agg = full_sales.groupby('Brand').agg(\n",
    "    sales_mean = ('SalesQuantity','mean'),\n",
    "    sales_std = ('SalesQuantity','std'),\n",
    ").reset_index()\n",
    "sales_agg['sales_cov'] = sales_agg.sales_std.div(sales_agg.sales_mean)\n",
    "sales_agg.sort_values('sales_cov')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bedcf93",
   "metadata": {
    "papermill": {
     "duration": 0.029446,
     "end_time": "2024-07-06T20:08:57.461433",
     "exception": false,
     "start_time": "2024-07-06T20:08:57.431987",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Here I define demand predictability based on which of three quantiles a SKU's covariance is located.\\\n",
    "This ensures X, Y, and Z will be equally distributed among SKUs that have been sold at least three times.\\\n",
    "In reality, X, Y, and Z are not likely to be equally represented and should be calculated based on predetermined thresholds."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5823e6fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:57.521351Z",
     "iopub.status.busy": "2024-07-06T20:08:57.520597Z",
     "iopub.status.idle": "2024-07-06T20:08:57.529980Z",
     "shell.execute_reply": "2024-07-06T20:08:57.528978Z"
    },
    "papermill": {
     "duration": 0.042109,
     "end_time": "2024-07-06T20:08:57.532542",
     "exception": false,
     "start_time": "2024-07-06T20:08:57.490433",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_threshold = sales_agg.sales_cov.quantile([.33333,.66666])[0.33333]\n",
    "Y_threshold = sales_agg.sales_cov.quantile([.33333,.66666])[0.66666]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "bc60cc07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:57.591779Z",
     "iopub.status.busy": "2024-07-06T20:08:57.591394Z",
     "iopub.status.idle": "2024-07-06T20:08:57.597756Z",
     "shell.execute_reply": "2024-07-06T20:08:57.596660Z"
    },
    "papermill": {
     "duration": 0.038851,
     "end_time": "2024-07-06T20:08:57.600181",
     "exception": false,
     "start_time": "2024-07-06T20:08:57.561330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def XYZ(cov):\n",
    "    if cov < X_threshold:\n",
    "        return 'X'\n",
    "    elif cov >= X_threshold and cov < Y_threshold:\n",
    "        return 'Y'\n",
    "    elif cov >= Y_threshold:\n",
    "        return 'Z'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "0945840e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:57.659714Z",
     "iopub.status.busy": "2024-07-06T20:08:57.659330Z",
     "iopub.status.idle": "2024-07-06T20:08:57.681490Z",
     "shell.execute_reply": "2024-07-06T20:08:57.680298Z"
    },
    "papermill": {
     "duration": 0.055137,
     "end_time": "2024-07-06T20:08:57.684221",
     "exception": false,
     "start_time": "2024-07-06T20:08:57.629084",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>sales_mean</th>\n",
       "      <th>sales_std</th>\n",
       "      <th>sales_cov</th>\n",
       "      <th>xyz_class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100</td>\n",
       "      <td>0.116667</td>\n",
       "      <td>0.323732</td>\n",
       "      <td>2.774844</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>0.483333</td>\n",
       "      <td>1.171580</td>\n",
       "      <td>2.423958</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>14.216667</td>\n",
       "      <td>47.433483</td>\n",
       "      <td>3.336470</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10021</td>\n",
       "      <td>1.316667</td>\n",
       "      <td>1.961422</td>\n",
       "      <td>1.489687</td>\n",
       "      <td>X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1003</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>1.464842</td>\n",
       "      <td>4.882807</td>\n",
       "      <td>Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7653</th>\n",
       "      <td>993</td>\n",
       "      <td>0.033333</td>\n",
       "      <td>0.181020</td>\n",
       "      <td>5.430610</td>\n",
       "      <td>Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7654</th>\n",
       "      <td>994</td>\n",
       "      <td>0.466667</td>\n",
       "      <td>1.032796</td>\n",
       "      <td>2.213133</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7655</th>\n",
       "      <td>995</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>0.668923</td>\n",
       "      <td>1.672307</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7656</th>\n",
       "      <td>998</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.680644</td>\n",
       "      <td>2.041933</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7657</th>\n",
       "      <td>999</td>\n",
       "      <td>0.383333</td>\n",
       "      <td>0.865373</td>\n",
       "      <td>2.257494</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7658 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Brand  sales_mean  sales_std  sales_cov xyz_class\n",
       "0       100    0.116667   0.323732   2.774844         Y\n",
       "1      1000    0.483333   1.171580   2.423958         Y\n",
       "2      1001   14.216667  47.433483   3.336470         Y\n",
       "3     10021    1.316667   1.961422   1.489687         X\n",
       "4      1003    0.300000   1.464842   4.882807         Z\n",
       "...     ...         ...        ...        ...       ...\n",
       "7653    993    0.033333   0.181020   5.430610         Z\n",
       "7654    994    0.466667   1.032796   2.213133         Y\n",
       "7655    995    0.400000   0.668923   1.672307         Y\n",
       "7656    998    0.333333   0.680644   2.041933         Y\n",
       "7657    999    0.383333   0.865373   2.257494         Y\n",
       "\n",
       "[7658 rows x 5 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales_agg['xyz_class']=sales_agg.sales_cov.apply(XYZ)\n",
    "sales_agg"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92b6030a",
   "metadata": {
    "papermill": {
     "duration": 0.029096,
     "end_time": "2024-07-06T20:08:57.742616",
     "exception": false,
     "start_time": "2024-07-06T20:08:57.713520",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Combine with profit dataset and mark each SKU without at least three sales as \"Z\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "5506cb9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:57.804038Z",
     "iopub.status.busy": "2024-07-06T20:08:57.803662Z",
     "iopub.status.idle": "2024-07-06T20:08:57.838347Z",
     "shell.execute_reply": "2024-07-06T20:08:57.837188Z"
    },
    "papermill": {
     "duration": 0.069168,
     "end_time": "2024-07-06T20:08:57.840926",
     "exception": false,
     "start_time": "2024-07-06T20:08:57.771758",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>total_value</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>avg_price</th>\n",
       "      <th>avg_paid</th>\n",
       "      <th>avg_markup</th>\n",
       "      <th>avg_profit</th>\n",
       "      <th>current_stock</th>\n",
       "      <th>abc_class</th>\n",
       "      <th>xyz_class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4261</td>\n",
       "      <td>117756.32</td>\n",
       "      <td>20226.0</td>\n",
       "      <td>21.992027</td>\n",
       "      <td>16.17</td>\n",
       "      <td>0.360051</td>\n",
       "      <td>5.822027</td>\n",
       "      <td>16769.0</td>\n",
       "      <td>A</td>\n",
       "      <td>X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3545</td>\n",
       "      <td>97640.30</td>\n",
       "      <td>11883.0</td>\n",
       "      <td>30.106806</td>\n",
       "      <td>21.89</td>\n",
       "      <td>0.375368</td>\n",
       "      <td>8.216806</td>\n",
       "      <td>16770.0</td>\n",
       "      <td>A</td>\n",
       "      <td>X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1233</td>\n",
       "      <td>93098.16</td>\n",
       "      <td>9578.0</td>\n",
       "      <td>35.990000</td>\n",
       "      <td>26.27</td>\n",
       "      <td>0.370004</td>\n",
       "      <td>9.720000</td>\n",
       "      <td>15047.0</td>\n",
       "      <td>A</td>\n",
       "      <td>X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8068</td>\n",
       "      <td>84047.75</td>\n",
       "      <td>11189.0</td>\n",
       "      <td>25.751641</td>\n",
       "      <td>18.24</td>\n",
       "      <td>0.411822</td>\n",
       "      <td>7.511641</td>\n",
       "      <td>15608.0</td>\n",
       "      <td>A</td>\n",
       "      <td>X</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3405</td>\n",
       "      <td>61745.40</td>\n",
       "      <td>9203.0</td>\n",
       "      <td>29.899269</td>\n",
       "      <td>23.19</td>\n",
       "      <td>0.289317</td>\n",
       "      <td>6.709269</td>\n",
       "      <td>12268.0</td>\n",
       "      <td>A</td>\n",
       "      <td>X</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Brand  total_value  Quantity  avg_price  avg_paid  avg_markup  avg_profit  \\\n",
       "0  4261    117756.32   20226.0  21.992027     16.17    0.360051    5.822027   \n",
       "1  3545     97640.30   11883.0  30.106806     21.89    0.375368    8.216806   \n",
       "2  1233     93098.16    9578.0  35.990000     26.27    0.370004    9.720000   \n",
       "3  8068     84047.75   11189.0  25.751641     18.24    0.411822    7.511641   \n",
       "4  3405     61745.40    9203.0  29.899269     23.19    0.289317    6.709269   \n",
       "\n",
       "   current_stock abc_class xyz_class  \n",
       "0        16769.0         A         X  \n",
       "1        16770.0         A         X  \n",
       "2        15047.0         A         X  \n",
       "3        15608.0         A         X  \n",
       "4        12268.0         A         X  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "abc_xyz_df = pd.merge(df,sales_agg[['Brand','xyz_class']],on='Brand',how='left')\n",
    "abc_xyz_df.xyz_class = abc_xyz_df.xyz_class.fillna('Z')\n",
    "abc_xyz_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "245c78a1",
   "metadata": {
    "papermill": {
     "duration": 0.02951,
     "end_time": "2024-07-06T20:08:57.900171",
     "exception": false,
     "start_time": "2024-07-06T20:08:57.870661",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Display relative proportions of X, Y, and Z class inventory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "37469e44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:57.961061Z",
     "iopub.status.busy": "2024-07-06T20:08:57.960682Z",
     "iopub.status.idle": "2024-07-06T20:08:57.997134Z",
     "shell.execute_reply": "2024-07-06T20:08:57.995904Z"
    },
    "papermill": {
     "duration": 0.070015,
     "end_time": "2024-07-06T20:08:57.999811",
     "exception": false,
     "start_time": "2024-07-06T20:08:57.929796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>xyz_class</th>\n",
       "      <th>SKUs</th>\n",
       "      <th>Quantity_sold</th>\n",
       "      <th>total_profit</th>\n",
       "      <th>current_stock</th>\n",
       "      <th>perc_quantity</th>\n",
       "      <th>perc_profit</th>\n",
       "      <th>perc_SKUs</th>\n",
       "      <th>perc_current_stock</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>X</td>\n",
       "      <td>2553</td>\n",
       "      <td>2185063.0</td>\n",
       "      <td>$9,122,325.27</td>\n",
       "      <td>3512711.0</td>\n",
       "      <td>0.89</td>\n",
       "      <td>0.84</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Y</td>\n",
       "      <td>2540</td>\n",
       "      <td>236251.0</td>\n",
       "      <td>$1,455,537.50</td>\n",
       "      <td>703658.0</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Z</td>\n",
       "      <td>6392</td>\n",
       "      <td>29855.0</td>\n",
       "      <td>$284,562.94</td>\n",
       "      <td>669407.0</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.56</td>\n",
       "      <td>0.14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  xyz_class  SKUs  Quantity_sold   total_profit  current_stock  perc_quantity  \\\n",
       "0         X  2553      2185063.0  $9,122,325.27      3512711.0           0.89   \n",
       "1         Y  2540       236251.0  $1,455,537.50       703658.0           0.10   \n",
       "2         Z  6392        29855.0    $284,562.94       669407.0           0.01   \n",
       "\n",
       "   perc_profit  perc_SKUs  perc_current_stock  \n",
       "0         0.84       0.22                0.72  \n",
       "1         0.13       0.22                0.14  \n",
       "2         0.03       0.56                0.14  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_by_class = abc_xyz_df.groupby('xyz_class').agg(\n",
    "    SKUs = ('xyz_class','count'),\n",
    "    Quantity_sold = ('Quantity','sum'),\n",
    "    total_profit = ('total_value', 'sum'),\n",
    "    current_stock = ('current_stock','sum')).reset_index()\n",
    "df_by_class['perc_quantity'] = df_by_class.Quantity_sold.div(df_by_class.Quantity_sold.sum()).round(2)\n",
    "df_by_class['perc_profit'] = df_by_class.total_profit.div(df_by_class.total_profit.sum()).round(2)\n",
    "df_by_class['perc_SKUs'] = df_by_class.SKUs.div(df_by_class.SKUs.sum()).round(2)\n",
    "df_by_class['perc_current_stock'] = df_by_class.current_stock.div(df_by_class.current_stock.sum()).round(2)\n",
    "df_by_class.total_profit = df_by_class.total_profit.apply(lambda x: \"${:,.2f}\".format(x))\n",
    "df_by_class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f33c8de3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:58.061011Z",
     "iopub.status.busy": "2024-07-06T20:08:58.060635Z",
     "iopub.status.idle": "2024-07-06T20:08:58.520865Z",
     "shell.execute_reply": "2024-07-06T20:08:58.519675Z"
    },
    "papermill": {
     "duration": 0.493901,
     "end_time": "2024-07-06T20:08:58.523495",
     "exception": false,
     "start_time": "2024-07-06T20:08:58.029594",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x700 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2)\n",
    "fig.set_size_inches(10, 7)\n",
    "ax1.pie(df_by_class.perc_SKUs,labels=df_by_class.xyz_class,autopct='%.0f%%',colors=['tab:green','gold','tab:red'])\n",
    "ax1.set_title('SKUs')\n",
    "ax2.pie(df_by_class.perc_profit,labels=df_by_class.xyz_class,autopct='%.0f%%',colors=['tab:green','gold','tab:red'])\n",
    "ax2.set_title('Profit')\n",
    "ax3.pie(df_by_class.perc_quantity,labels=df_by_class.xyz_class,autopct='%.0f%%',colors=['tab:green','gold','tab:red'])\n",
    "ax3.set_title('Quantity sold')\n",
    "ax4.pie(df_by_class.perc_current_stock,labels=df_by_class.xyz_class,autopct='%.0f%%',colors=['tab:green','gold','tab:red'])\n",
    "ax4.set_title('Current stock')\n",
    "fig.suptitle('XYZ proportions', fontsize=20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "641afd92",
   "metadata": {
    "papermill": {
     "duration": 0.030598,
     "end_time": "2024-07-06T20:08:58.585731",
     "exception": false,
     "start_time": "2024-07-06T20:08:58.555133",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The great majority of sales and profit come from X class items, the most predictable class. This is healthy sign for the company, as it indicates less extreme highs and lows. Note that the current stock has a disproportionate amount of Z class stock. This may or may not be a bad thing, depending on the company's goals (customer satisfaction vs profit), but it should probably be reduced."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1415493a",
   "metadata": {
    "papermill": {
     "duration": 0.031187,
     "end_time": "2024-07-06T20:08:58.648178",
     "exception": false,
     "start_time": "2024-07-06T20:08:58.616991",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 4: Calculate safety stock"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e136e35f",
   "metadata": {
    "papermill": {
     "duration": 0.030878,
     "end_time": "2024-07-06T20:08:58.710170",
     "exception": false,
     "start_time": "2024-07-06T20:08:58.679292",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Combine ABC and XYZ codes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "4d385735",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:58.773229Z",
     "iopub.status.busy": "2024-07-06T20:08:58.772827Z",
     "iopub.status.idle": "2024-07-06T20:08:58.802689Z",
     "shell.execute_reply": "2024-07-06T20:08:58.801551Z"
    },
    "papermill": {
     "duration": 0.064297,
     "end_time": "2024-07-06T20:08:58.805203",
     "exception": false,
     "start_time": "2024-07-06T20:08:58.740906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>total_value</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>avg_price</th>\n",
       "      <th>avg_paid</th>\n",
       "      <th>avg_markup</th>\n",
       "      <th>avg_profit</th>\n",
       "      <th>current_stock</th>\n",
       "      <th>abc_class</th>\n",
       "      <th>xyz_class</th>\n",
       "      <th>abc_xyz_class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4261</td>\n",
       "      <td>1.177563e+05</td>\n",
       "      <td>20226.0</td>\n",
       "      <td>21.992027</td>\n",
       "      <td>16.17</td>\n",
       "      <td>3.600511e-01</td>\n",
       "      <td>5.822027e+00</td>\n",
       "      <td>16769.0</td>\n",
       "      <td>A</td>\n",
       "      <td>X</td>\n",
       "      <td>AX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3545</td>\n",
       "      <td>9.764030e+04</td>\n",
       "      <td>11883.0</td>\n",
       "      <td>30.106806</td>\n",
       "      <td>21.89</td>\n",
       "      <td>3.753680e-01</td>\n",
       "      <td>8.216806e+00</td>\n",
       "      <td>16770.0</td>\n",
       "      <td>A</td>\n",
       "      <td>X</td>\n",
       "      <td>AX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1233</td>\n",
       "      <td>9.309816e+04</td>\n",
       "      <td>9578.0</td>\n",
       "      <td>35.990000</td>\n",
       "      <td>26.27</td>\n",
       "      <td>3.700038e-01</td>\n",
       "      <td>9.720000e+00</td>\n",
       "      <td>15047.0</td>\n",
       "      <td>A</td>\n",
       "      <td>X</td>\n",
       "      <td>AX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8068</td>\n",
       "      <td>8.404775e+04</td>\n",
       "      <td>11189.0</td>\n",
       "      <td>25.751641</td>\n",
       "      <td>18.24</td>\n",
       "      <td>4.118224e-01</td>\n",
       "      <td>7.511641e+00</td>\n",
       "      <td>15608.0</td>\n",
       "      <td>A</td>\n",
       "      <td>X</td>\n",
       "      <td>AX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3405</td>\n",
       "      <td>6.174540e+04</td>\n",
       "      <td>9203.0</td>\n",
       "      <td>29.899269</td>\n",
       "      <td>23.19</td>\n",
       "      <td>2.893173e-01</td>\n",
       "      <td>6.709269e+00</td>\n",
       "      <td>12268.0</td>\n",
       "      <td>A</td>\n",
       "      <td>X</td>\n",
       "      <td>AX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11480</th>\n",
       "      <td>16321</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>CZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11481</th>\n",
       "      <td>26464</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>130.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>CZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11482</th>\n",
       "      <td>21440</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>869.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>CZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11483</th>\n",
       "      <td>1757</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>159.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>CZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11484</th>\n",
       "      <td>2729</td>\n",
       "      <td>-3.552714e-15</td>\n",
       "      <td>1.0</td>\n",
       "      <td>19.990000</td>\n",
       "      <td>19.99</td>\n",
       "      <td>-2.220446e-16</td>\n",
       "      <td>-3.552714e-15</td>\n",
       "      <td>400.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>CZ</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11485 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Brand   total_value  Quantity   avg_price  avg_paid    avg_markup  \\\n",
       "0       4261  1.177563e+05   20226.0   21.992027     16.17  3.600511e-01   \n",
       "1       3545  9.764030e+04   11883.0   30.106806     21.89  3.753680e-01   \n",
       "2       1233  9.309816e+04    9578.0   35.990000     26.27  3.700038e-01   \n",
       "3       8068  8.404775e+04   11189.0   25.751641     18.24  4.118224e-01   \n",
       "4       3405  6.174540e+04    9203.0   29.899269     23.19  2.893173e-01   \n",
       "...      ...           ...       ...         ...       ...           ...   \n",
       "11480  16321  0.000000e+00       0.0   25.990000       NaN           NaN   \n",
       "11481  26464  0.000000e+00       0.0   18.990000       NaN           NaN   \n",
       "11482  21440  0.000000e+00       0.0  869.990000       NaN           NaN   \n",
       "11483   1757  0.000000e+00       0.0  159.990000       NaN           NaN   \n",
       "11484   2729 -3.552714e-15       1.0   19.990000     19.99 -2.220446e-16   \n",
       "\n",
       "         avg_profit  current_stock abc_class xyz_class abc_xyz_class  \n",
       "0      5.822027e+00        16769.0         A         X            AX  \n",
       "1      8.216806e+00        16770.0         A         X            AX  \n",
       "2      9.720000e+00        15047.0         A         X            AX  \n",
       "3      7.511641e+00        15608.0         A         X            AX  \n",
       "4      6.709269e+00        12268.0         A         X            AX  \n",
       "...             ...            ...       ...       ...           ...  \n",
       "11480           NaN            0.0         C         Z            CZ  \n",
       "11481           NaN          130.0         C         Z            CZ  \n",
       "11482           NaN           24.0         C         Z            CZ  \n",
       "11483           NaN           24.0         C         Z            CZ  \n",
       "11484 -3.552714e-15          400.0         C         Z            CZ  \n",
       "\n",
       "[11485 rows x 11 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "abc_xyz_df['abc_xyz_class'] = abc_xyz_df.abc_class+abc_xyz_df.xyz_class\n",
    "abc_xyz_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d541a1d2",
   "metadata": {
    "papermill": {
     "duration": 0.030871,
     "end_time": "2024-07-06T20:08:58.867295",
     "exception": false,
     "start_time": "2024-07-06T20:08:58.836424",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now that we have the ABC-XYZ code for each SKU, we can use it to help determine ideal safety stock.\\\n",
    "How exactly this should be done will depend on the company's goals.\\\n",
    "Here I've assigned higher service levels (that is, the desired probability of something being in stock on any given day)\\\n",
    "to SKUs with higher value and/or higher consistency, and lower service levels to those with lower values and/or consistency.\\\n",
    "A higher service level means more safety stock."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "8041e86c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:58.931540Z",
     "iopub.status.busy": "2024-07-06T20:08:58.930713Z",
     "iopub.status.idle": "2024-07-06T20:08:58.967422Z",
     "shell.execute_reply": "2024-07-06T20:08:58.966269Z"
    },
    "papermill": {
     "duration": 0.071544,
     "end_time": "2024-07-06T20:08:58.969916",
     "exception": false,
     "start_time": "2024-07-06T20:08:58.898372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>total_value</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>avg_price</th>\n",
       "      <th>avg_paid</th>\n",
       "      <th>avg_markup</th>\n",
       "      <th>avg_profit</th>\n",
       "      <th>current_stock</th>\n",
       "      <th>abc_class</th>\n",
       "      <th>xyz_class</th>\n",
       "      <th>abc_xyz_class</th>\n",
       "      <th>service_factor</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4261</td>\n",
       "      <td>1.177563e+05</td>\n",
       "      <td>20226.0</td>\n",
       "      <td>21.992027</td>\n",
       "      <td>16.17</td>\n",
       "      <td>3.600511e-01</td>\n",
       "      <td>5.822027e+00</td>\n",
       "      <td>16769.0</td>\n",
       "      <td>A</td>\n",
       "      <td>X</td>\n",
       "      <td>AX</td>\n",
       "      <td>1.880794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3545</td>\n",
       "      <td>9.764030e+04</td>\n",
       "      <td>11883.0</td>\n",
       "      <td>30.106806</td>\n",
       "      <td>21.89</td>\n",
       "      <td>3.753680e-01</td>\n",
       "      <td>8.216806e+00</td>\n",
       "      <td>16770.0</td>\n",
       "      <td>A</td>\n",
       "      <td>X</td>\n",
       "      <td>AX</td>\n",
       "      <td>1.880794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1233</td>\n",
       "      <td>9.309816e+04</td>\n",
       "      <td>9578.0</td>\n",
       "      <td>35.990000</td>\n",
       "      <td>26.27</td>\n",
       "      <td>3.700038e-01</td>\n",
       "      <td>9.720000e+00</td>\n",
       "      <td>15047.0</td>\n",
       "      <td>A</td>\n",
       "      <td>X</td>\n",
       "      <td>AX</td>\n",
       "      <td>1.880794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8068</td>\n",
       "      <td>8.404775e+04</td>\n",
       "      <td>11189.0</td>\n",
       "      <td>25.751641</td>\n",
       "      <td>18.24</td>\n",
       "      <td>4.118224e-01</td>\n",
       "      <td>7.511641e+00</td>\n",
       "      <td>15608.0</td>\n",
       "      <td>A</td>\n",
       "      <td>X</td>\n",
       "      <td>AX</td>\n",
       "      <td>1.880794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3405</td>\n",
       "      <td>6.174540e+04</td>\n",
       "      <td>9203.0</td>\n",
       "      <td>29.899269</td>\n",
       "      <td>23.19</td>\n",
       "      <td>2.893173e-01</td>\n",
       "      <td>6.709269e+00</td>\n",
       "      <td>12268.0</td>\n",
       "      <td>A</td>\n",
       "      <td>X</td>\n",
       "      <td>AX</td>\n",
       "      <td>1.880794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11480</th>\n",
       "      <td>16321</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>CZ</td>\n",
       "      <td>0.524401</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11481</th>\n",
       "      <td>26464</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>130.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>CZ</td>\n",
       "      <td>0.524401</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11482</th>\n",
       "      <td>21440</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>869.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>CZ</td>\n",
       "      <td>0.524401</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11483</th>\n",
       "      <td>1757</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>159.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>CZ</td>\n",
       "      <td>0.524401</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11484</th>\n",
       "      <td>2729</td>\n",
       "      <td>-3.552714e-15</td>\n",
       "      <td>1.0</td>\n",
       "      <td>19.990000</td>\n",
       "      <td>19.99</td>\n",
       "      <td>-2.220446e-16</td>\n",
       "      <td>-3.552714e-15</td>\n",
       "      <td>400.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>CZ</td>\n",
       "      <td>0.524401</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11485 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Brand   total_value  Quantity   avg_price  avg_paid    avg_markup  \\\n",
       "0       4261  1.177563e+05   20226.0   21.992027     16.17  3.600511e-01   \n",
       "1       3545  9.764030e+04   11883.0   30.106806     21.89  3.753680e-01   \n",
       "2       1233  9.309816e+04    9578.0   35.990000     26.27  3.700038e-01   \n",
       "3       8068  8.404775e+04   11189.0   25.751641     18.24  4.118224e-01   \n",
       "4       3405  6.174540e+04    9203.0   29.899269     23.19  2.893173e-01   \n",
       "...      ...           ...       ...         ...       ...           ...   \n",
       "11480  16321  0.000000e+00       0.0   25.990000       NaN           NaN   \n",
       "11481  26464  0.000000e+00       0.0   18.990000       NaN           NaN   \n",
       "11482  21440  0.000000e+00       0.0  869.990000       NaN           NaN   \n",
       "11483   1757  0.000000e+00       0.0  159.990000       NaN           NaN   \n",
       "11484   2729 -3.552714e-15       1.0   19.990000     19.99 -2.220446e-16   \n",
       "\n",
       "         avg_profit  current_stock abc_class xyz_class abc_xyz_class  \\\n",
       "0      5.822027e+00        16769.0         A         X            AX   \n",
       "1      8.216806e+00        16770.0         A         X            AX   \n",
       "2      9.720000e+00        15047.0         A         X            AX   \n",
       "3      7.511641e+00        15608.0         A         X            AX   \n",
       "4      6.709269e+00        12268.0         A         X            AX   \n",
       "...             ...            ...       ...       ...           ...   \n",
       "11480           NaN            0.0         C         Z            CZ   \n",
       "11481           NaN          130.0         C         Z            CZ   \n",
       "11482           NaN           24.0         C         Z            CZ   \n",
       "11483           NaN           24.0         C         Z            CZ   \n",
       "11484 -3.552714e-15          400.0         C         Z            CZ   \n",
       "\n",
       "       service_factor  \n",
       "0            1.880794  \n",
       "1            1.880794  \n",
       "2            1.880794  \n",
       "3            1.880794  \n",
       "4            1.880794  \n",
       "...               ...  \n",
       "11480        0.524401  \n",
       "11481        0.524401  \n",
       "11482        0.524401  \n",
       "11483        0.524401  \n",
       "11484        0.524401  \n",
       "\n",
       "[11485 rows x 12 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.stats import norm\n",
    "service_levels = {'AX':.97, 'AY':.95, 'AZ':.93,'BX':.91,'BY':.90,'BZ':.89,'CX':.85,'CY':.80,'CZ':.70}\n",
    "service_factors = {k: norm.ppf(v) for k, v in service_levels.items()}\n",
    "abc_xyz_df['service_factor'] = abc_xyz_df.abc_xyz_class.map(service_factors)\n",
    "abc_xyz_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb4a1201",
   "metadata": {
    "papermill": {
     "duration": 0.03144,
     "end_time": "2024-07-06T20:08:59.033584",
     "exception": false,
     "start_time": "2024-07-06T20:08:59.002144",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Calculating safety stock also requires the mean and standard deviation of quantities sold, which have already been determined,\\\n",
    "and the mean and standard deviation of lead times (the time between ordering a SKU and receiving it)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "25620820",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:08:59.098774Z",
     "iopub.status.busy": "2024-07-06T20:08:59.098392Z",
     "iopub.status.idle": "2024-07-06T20:09:02.203237Z",
     "shell.execute_reply": "2024-07-06T20:09:02.202036Z"
    },
    "papermill": {
     "duration": 3.140648,
     "end_time": "2024-07-06T20:09:02.205931",
     "exception": false,
     "start_time": "2024-07-06T20:08:59.065283",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "purchases['lead_time'] = purchases.ReceivingDate-purchases.PODate\n",
    "ax = sns.histplot(purchases.lead_time.dt.days,discrete=True)\n",
    "ax.set(xlabel='Lead time in days', title='Distribution of lead times')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "255b82b5",
   "metadata": {
    "papermill": {
     "duration": 0.032365,
     "end_time": "2024-07-06T20:09:02.270635",
     "exception": false,
     "start_time": "2024-07-06T20:09:02.238270",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This chart shows the lead times have a normal distribution, which is important for the safety stock formula."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0ddd458",
   "metadata": {
    "papermill": {
     "duration": 0.031815,
     "end_time": "2024-07-06T20:09:02.334759",
     "exception": false,
     "start_time": "2024-07-06T20:09:02.302944",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Calculate lead time mean and std."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4d091542",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:09:02.400684Z",
     "iopub.status.busy": "2024-07-06T20:09:02.400238Z",
     "iopub.status.idle": "2024-07-06T20:09:02.723052Z",
     "shell.execute_reply": "2024-07-06T20:09:02.721909Z"
    },
    "papermill": {
     "duration": 0.358775,
     "end_time": "2024-07-06T20:09:02.725527",
     "exception": false,
     "start_time": "2024-07-06T20:09:02.366752",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>lead_time_mean</th>\n",
       "      <th>lead_time_std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100</td>\n",
       "      <td>6 days 20:48:00</td>\n",
       "      <td>1 days 13:40:33.355677774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>9 days 06:00:00</td>\n",
       "      <td>2 days 12:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10009</td>\n",
       "      <td>8 days 00:00:00</td>\n",
       "      <td>1 days 09:56:28.051789035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>7 days 06:48:46.451612903</td>\n",
       "      <td>2 days 02:42:34.603849582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10010</td>\n",
       "      <td>9 days 00:00:00</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Brand            lead_time_mean             lead_time_std\n",
       "0    100           6 days 20:48:00 1 days 13:40:33.355677774\n",
       "1   1000           9 days 06:00:00           2 days 12:00:00\n",
       "2  10009           8 days 00:00:00 1 days 09:56:28.051789035\n",
       "3   1001 7 days 06:48:46.451612903 2 days 02:42:34.603849582\n",
       "4  10010           9 days 00:00:00                       NaT"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "purchases_agg = purchases.groupby('Brand').agg(\n",
    "    lead_time_mean = ('lead_time','mean'),\n",
    "    lead_time_std = ('lead_time','std'),\n",
    ").reset_index()\n",
    "purchases_agg.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f28f7bf",
   "metadata": {
    "papermill": {
     "duration": 0.03199,
     "end_time": "2024-07-06T20:09:02.789915",
     "exception": false,
     "start_time": "2024-07-06T20:09:02.757925",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We now have everything to calculate the safety stock, treating demand and lead times as independent factors, using the following formula.\n",
    "* SS = safety stock\n",
    "* Z = service factor\n",
    "* $\\mu$ = mean\n",
    "* $\\sigma$ = standard deviation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5dcd92cc",
   "metadata": {
    "papermill": {
     "duration": 0.031921,
     "end_time": "2024-07-06T20:09:02.856047",
     "exception": false,
     "start_time": "2024-07-06T20:09:02.824126",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## $$SS = Z \\times \\sqrt{\\mu_{lead time} \\times \\sigma^2_{demand} + \\mu_{demand} \\times \\sigma^2_{lead time}}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "32f2bc80",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:09:02.923192Z",
     "iopub.status.busy": "2024-07-06T20:09:02.922768Z",
     "iopub.status.idle": "2024-07-06T20:09:02.972653Z",
     "shell.execute_reply": "2024-07-06T20:09:02.971546Z"
    },
    "papermill": {
     "duration": 0.087098,
     "end_time": "2024-07-06T20:09:02.975516",
     "exception": false,
     "start_time": "2024-07-06T20:09:02.888418",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>safety_stock</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4261</td>\n",
       "      <td>1757.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3545</td>\n",
       "      <td>1161.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1233</td>\n",
       "      <td>785.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8068</td>\n",
       "      <td>888.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3405</td>\n",
       "      <td>884.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Brand  safety_stock\n",
       "0  4261        1757.0\n",
       "1  3545        1161.0\n",
       "2  1233         785.0\n",
       "3  8068         888.0\n",
       "4  3405         884.0"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rec_stock_df = pd.merge(abc_xyz_df, sales_agg[['Brand','sales_mean','sales_std']], on='Brand',how='left')\n",
    "rec_stock_df = pd.merge(rec_stock_df, purchases_agg, on='Brand',how='left')\n",
    "\n",
    "#Put lead time into decimal format\n",
    "rec_stock_df.lead_time_mean = rec_stock_df.lead_time_mean.dt.days+rec_stock_df.lead_time_mean.dt.seconds/(60*60*24)\n",
    "rec_stock_df.lead_time_std = rec_stock_df.lead_time_std.dt.days+rec_stock_df.lead_time_std.dt.seconds/(60*60*24)\n",
    "\n",
    "#Implement safety stock formula\n",
    "rec_stock_df['safety_stock'] = rec_stock_df.service_factor.mul(\n",
    "                                                                rec_stock_df.lead_time_mean.mul(rec_stock_df.sales_std.pow(2))\n",
    "                                                                    .add(\n",
    "                                                                rec_stock_df.sales_mean.mul(rec_stock_df.lead_time_std.pow(2))\n",
    "                                                            ).pow(0.5)\n",
    "                                                        ).round()\n",
    "rec_stock_df[['Brand','safety_stock']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "35234835",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:09:03.042440Z",
     "iopub.status.busy": "2024-07-06T20:09:03.042003Z",
     "iopub.status.idle": "2024-07-06T20:09:03.819328Z",
     "shell.execute_reply": "2024-07-06T20:09:03.818186Z"
    },
    "papermill": {
     "duration": 0.813955,
     "end_time": "2024-07-06T20:09:03.821976",
     "exception": false,
     "start_time": "2024-07-06T20:09:03.008021",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.histplot(rec_stock_df.safety_stock,bins=20)\n",
    "ax.set(xlabel='Safety Stock', title='Distribution of safety stocks (log scale)')\n",
    "ax.set_yscale('log')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57f874fb",
   "metadata": {
    "papermill": {
     "duration": 0.032494,
     "end_time": "2024-07-06T20:09:03.887804",
     "exception": false,
     "start_time": "2024-07-06T20:09:03.855310",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "As should be exected, only a few SKUs should have a high safety stock. This is will help keep inventory costs down."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e45e82d",
   "metadata": {
    "papermill": {
     "duration": 0.032491,
     "end_time": "2024-07-06T20:09:03.953383",
     "exception": false,
     "start_time": "2024-07-06T20:09:03.920892",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 5: Calculate Economic Order Quantity (optimal stock)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64aa7983",
   "metadata": {
    "papermill": {
     "duration": 0.032779,
     "end_time": "2024-07-06T20:09:04.018981",
     "exception": false,
     "start_time": "2024-07-06T20:09:03.986202",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Economic Order Quantity (EOQ) is the balance point between avoiding the costs associated with frequent small orders and the avoiding the costs of holding inventory. To find the EOQ, we must know the Order Placement Cost (OPC) of each SKU, which measures how much money it costs to place an additional order. We also must know the Stock Ownership Cost (SOC), which measures how much money it costs to hold an item in inventory. These measurements are highly context-dependent, reliant upon information that is not available in this example dataset. Therefore I am here using the arbitrary guesses of $30 for OPC and 10% of an item's value for the annual SOC. (Ideally SOC would take into account the size of the item, but I'll leave that for another project.)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24c1dfcd",
   "metadata": {
    "papermill": {
     "duration": 0.032681,
     "end_time": "2024-07-06T20:09:04.084453",
     "exception": false,
     "start_time": "2024-07-06T20:09:04.051772",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## $$EOQ = \\sqrt{2D \\times OPC \\over SOC}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "7d2d26fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:09:04.151882Z",
     "iopub.status.busy": "2024-07-06T20:09:04.151482Z",
     "iopub.status.idle": "2024-07-06T20:09:04.169258Z",
     "shell.execute_reply": "2024-07-06T20:09:04.168151Z"
    },
    "papermill": {
     "duration": 0.054115,
     "end_time": "2024-07-06T20:09:04.171568",
     "exception": false,
     "start_time": "2024-07-06T20:09:04.117453",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>safety_stock</th>\n",
       "      <th>EOQ</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4261</td>\n",
       "      <td>1757.0</td>\n",
       "      <td>1832.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3545</td>\n",
       "      <td>1161.0</td>\n",
       "      <td>1200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1233</td>\n",
       "      <td>785.0</td>\n",
       "      <td>986.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8068</td>\n",
       "      <td>888.0</td>\n",
       "      <td>1259.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3405</td>\n",
       "      <td>884.0</td>\n",
       "      <td>1060.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Brand  safety_stock     EOQ\n",
       "0  4261        1757.0  1832.0\n",
       "1  3545        1161.0  1200.0\n",
       "2  1233         785.0   986.0\n",
       "3  8068         888.0  1259.0\n",
       "4  3405         884.0  1060.0"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "OPC = 30 #Order Placement Cost, chosen arbitrarily\n",
    "SOC = rec_stock_df.avg_price.mul(.1).div(365) #Stock Ownership Cost, ratio to average price chosen arbitarily\n",
    "rec_stock_df['EOQ'] = rec_stock_df.sales_mean.mul(2).mul(OPC).div(SOC).pow(.5).round()\n",
    "rec_stock_df[['Brand','safety_stock','EOQ']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "c01db002",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:09:04.240060Z",
     "iopub.status.busy": "2024-07-06T20:09:04.239646Z",
     "iopub.status.idle": "2024-07-06T20:09:05.010987Z",
     "shell.execute_reply": "2024-07-06T20:09:05.009866Z"
    },
    "papermill": {
     "duration": 0.808177,
     "end_time": "2024-07-06T20:09:05.013384",
     "exception": false,
     "start_time": "2024-07-06T20:09:04.205207",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.histplot(rec_stock_df.EOQ,bins=20)\n",
    "ax.set(xlabel='Economic Order Quantity', title='Distribution of EOQ (log scale)')\n",
    "ax.set_yscale('log')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad909a82",
   "metadata": {
    "papermill": {
     "duration": 0.033389,
     "end_time": "2024-07-06T20:09:05.080447",
     "exception": false,
     "start_time": "2024-07-06T20:09:05.047058",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "As with safety stock, only a few SKUs have large EOQs."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc0536e0",
   "metadata": {
    "papermill": {
     "duration": 0.033209,
     "end_time": "2024-07-06T20:09:05.147874",
     "exception": false,
     "start_time": "2024-07-06T20:09:05.114665",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 6: Calculate recommended stock"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf8b8458",
   "metadata": {
    "papermill": {
     "duration": 0.033265,
     "end_time": "2024-07-06T20:09:05.215281",
     "exception": false,
     "start_time": "2024-07-06T20:09:05.182016",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Add EOQ and safety stock together to create recommended stock."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "7e3cb24a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:09:05.284805Z",
     "iopub.status.busy": "2024-07-06T20:09:05.284386Z",
     "iopub.status.idle": "2024-07-06T20:09:05.304443Z",
     "shell.execute_reply": "2024-07-06T20:09:05.303333Z"
    },
    "papermill": {
     "duration": 0.057496,
     "end_time": "2024-07-06T20:09:05.306831",
     "exception": false,
     "start_time": "2024-07-06T20:09:05.249335",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>safety_stock</th>\n",
       "      <th>EOQ</th>\n",
       "      <th>rec_stock</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4261</td>\n",
       "      <td>1757.0</td>\n",
       "      <td>1832.0</td>\n",
       "      <td>3589.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3545</td>\n",
       "      <td>1161.0</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>2361.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1233</td>\n",
       "      <td>785.0</td>\n",
       "      <td>986.0</td>\n",
       "      <td>1771.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8068</td>\n",
       "      <td>888.0</td>\n",
       "      <td>1259.0</td>\n",
       "      <td>2147.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3405</td>\n",
       "      <td>884.0</td>\n",
       "      <td>1060.0</td>\n",
       "      <td>1944.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11480</th>\n",
       "      <td>16321</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11481</th>\n",
       "      <td>26464</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11482</th>\n",
       "      <td>21440</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11483</th>\n",
       "      <td>1757</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11484</th>\n",
       "      <td>2729</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11485 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Brand  safety_stock     EOQ  rec_stock\n",
       "0       4261        1757.0  1832.0     3589.0\n",
       "1       3545        1161.0  1200.0     2361.0\n",
       "2       1233         785.0   986.0     1771.0\n",
       "3       8068         888.0  1259.0     2147.0\n",
       "4       3405         884.0  1060.0     1944.0\n",
       "...      ...           ...     ...        ...\n",
       "11480  16321           NaN     NaN        NaN\n",
       "11481  26464           NaN     NaN        NaN\n",
       "11482  21440           NaN     NaN        NaN\n",
       "11483   1757           NaN     NaN        NaN\n",
       "11484   2729           0.0    14.0       14.0\n",
       "\n",
       "[11485 rows x 4 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rec_stock_df['rec_stock'] = rec_stock_df.safety_stock.add(rec_stock_df.EOQ)\n",
    "rec_stock_df.drop(rec_stock_df.columns[1:16],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "b232d80f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:09:05.377077Z",
     "iopub.status.busy": "2024-07-06T20:09:05.376323Z",
     "iopub.status.idle": "2024-07-06T20:09:06.305555Z",
     "shell.execute_reply": "2024-07-06T20:09:06.304276Z"
    },
    "papermill": {
     "duration": 0.966897,
     "end_time": "2024-07-06T20:09:06.308066",
     "exception": false,
     "start_time": "2024-07-06T20:09:05.341169",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "current_stock_df = end_inv.groupby('Brand').agg(current_stock = ('onHand','sum')).reset_index()\n",
    "fig = plt.figure(figsize=(10,6))\n",
    "ax1 = sns.histplot(rec_stock_df.rec_stock,binwidth=500,color = 'royalblue')\n",
    "ax2 = sns.histplot(current_stock_df.current_stock,fill=False,color='r',binwidth=500)\n",
    "fig.legend(labels=['Recommended stock','Current stock'])\n",
    "ax1.set_yscale('log')\n",
    "ax2.set(xlabel='Quantity of Stock', title='Distribution of recommended vs current stock (log scale)')\n",
    "ax2.set_yscale('log')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b2eb548",
   "metadata": {
    "papermill": {
     "duration": 0.035357,
     "end_time": "2024-07-06T20:09:06.378908",
     "exception": false,
     "start_time": "2024-07-06T20:09:06.343551",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This chart doesn't tell the whole story, but it does indicate a significant overstocking of several SKUs. The degree is difficult to assess due to the log scale, and no conclusion can be drawn regarding possible understocking. More digging is needed."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1af96b6",
   "metadata": {
    "papermill": {
     "duration": 0.034348,
     "end_time": "2024-07-06T20:09:06.448163",
     "exception": false,
     "start_time": "2024-07-06T20:09:06.413815",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 7: Final observations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c8f7cd5",
   "metadata": {
    "papermill": {
     "duration": 0.034414,
     "end_time": "2024-07-06T20:09:06.518237",
     "exception": false,
     "start_time": "2024-07-06T20:09:06.483823",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now that we have the recommended stock for each SKU, we can subtract the current stock from it to find the gap.\\\n",
    "This will result in a clearer picture of the most overstocked and most understocked SKUs."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec2e9b4f",
   "metadata": {
    "papermill": {
     "duration": 0.034471,
     "end_time": "2024-07-06T20:09:06.587448",
     "exception": false,
     "start_time": "2024-07-06T20:09:06.552977",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Calculate whether a SKU is over- or understocked, and by how much.\\\n",
    "I've set the threshold for being tagged as either at 10% of the recommended stock.\\\n",
    "I've also tagged SKUs that have stock but have been sold less than three times as overstocked."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "2a8e13b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:09:06.658855Z",
     "iopub.status.busy": "2024-07-06T20:09:06.658426Z",
     "iopub.status.idle": "2024-07-06T20:09:06.704970Z",
     "shell.execute_reply": "2024-07-06T20:09:06.703872Z"
    },
    "papermill": {
     "duration": 0.085476,
     "end_time": "2024-07-06T20:09:06.707369",
     "exception": false,
     "start_time": "2024-07-06T20:09:06.621893",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>current_stock</th>\n",
       "      <th>rec_stock</th>\n",
       "      <th>understock_quantity</th>\n",
       "      <th>overstock_quantity</th>\n",
       "      <th>is_understocked</th>\n",
       "      <th>is_overstocked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3991</th>\n",
       "      <td>100</td>\n",
       "      <td>59.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4840</th>\n",
       "      <td>1000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8780</th>\n",
       "      <td>10009</td>\n",
       "      <td>13.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1663</th>\n",
       "      <td>1001</td>\n",
       "      <td>425.0</td>\n",
       "      <td>885.0</td>\n",
       "      <td>460.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8765</th>\n",
       "      <td>10010</td>\n",
       "      <td>18.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Brand  current_stock  rec_stock  understock_quantity  \\\n",
       "3991    100           59.0       14.0                  0.0   \n",
       "4840   1000            0.0       83.0                 83.0   \n",
       "8780  10009           13.0        NaN                  NaN   \n",
       "1663   1001          425.0      885.0                460.0   \n",
       "8765  10010           18.0        NaN                  NaN   \n",
       "\n",
       "      overstock_quantity  is_understocked  is_overstocked  \n",
       "3991                45.0            False            True  \n",
       "4840                 0.0             True           False  \n",
       "8780                 NaN            False            True  \n",
       "1663                 0.0             True           False  \n",
       "8765                 NaN            False            True  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "threshold = 0.1\n",
    "needed_stock_df = rec_stock_df\n",
    "needed_stock_df['understock_quantity'] = needed_stock_df.rec_stock.sub(needed_stock_df.current_stock).clip(lower=0)\n",
    "needed_stock_df['overstock_quantity'] = needed_stock_df.current_stock.sub(needed_stock_df.rec_stock).clip(lower=0)\n",
    "needed_stock_df['is_understocked'] = needed_stock_df.understock_quantity>needed_stock_df.rec_stock.mul(threshold)\n",
    "needed_stock_df['is_overstocked'] = (needed_stock_df.overstock_quantity>needed_stock_df.rec_stock.mul(threshold)) | ((needed_stock_df.rec_stock.isna() & needed_stock_df.current_stock>0))\n",
    "#Display\n",
    "needed_stock_df[['Brand','current_stock','rec_stock','understock_quantity','overstock_quantity','is_understocked','is_overstocked']].sort_values('Brand').head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed675b98",
   "metadata": {
    "papermill": {
     "duration": 0.035797,
     "end_time": "2024-07-06T20:09:06.778154",
     "exception": false,
     "start_time": "2024-07-06T20:09:06.742357",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Having a full list of understocked and overstocked SKUs is useful, but just to get an idea of the worst discrepancies, I'll display the Top 10 for each."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "e4d82aaf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:09:06.852267Z",
     "iopub.status.busy": "2024-07-06T20:09:06.851267Z",
     "iopub.status.idle": "2024-07-06T20:09:07.603777Z",
     "shell.execute_reply": "2024-07-06T20:09:07.602638Z"
    },
    "papermill": {
     "duration": 0.793809,
     "end_time": "2024-07-06T20:09:07.607213",
     "exception": false,
     "start_time": "2024-07-06T20:09:06.813404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "top_10_overstocked = needed_stock_df.sort_values('overstock_quantity',ascending=False).head(10)\n",
    "top_10_overstocked = pd.merge(top_10_overstocked,sales[['Brand','Description']].drop_duplicates(),on='Brand',how='left')\n",
    "\n",
    "bar_width = 0.4\n",
    "index = np.arange(len(top_10_overstocked))\n",
    "plt.figure(figsize=(15, 10))\n",
    "bar1 = plt.bar(index, top_10_overstocked['current_stock'], bar_width, label='Current Stock', color='b')\n",
    "bar2 = plt.bar([i + bar_width for i in index], top_10_overstocked['rec_stock'], bar_width, label='Recommended Stock', color='r')\n",
    "plt.ylabel('Quantity')\n",
    "plt.title('Top 10 most overstocked SKUs',fontsize=20)\n",
    "plt.xticks([i + bar_width / 2 for i in index], top_10_overstocked['Description'], rotation=45, ha='right')\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "2ce65f83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:09:07.684856Z",
     "iopub.status.busy": "2024-07-06T20:09:07.684463Z",
     "iopub.status.idle": "2024-07-06T20:09:08.475330Z",
     "shell.execute_reply": "2024-07-06T20:09:08.474183Z"
    },
    "papermill": {
     "duration": 0.833885,
     "end_time": "2024-07-06T20:09:08.478266",
     "exception": false,
     "start_time": "2024-07-06T20:09:07.644381",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "top_10_to_order = needed_stock_df.sort_values('understock_quantity',ascending=False).head(10)\n",
    "top_10_to_order = pd.merge(top_10_to_order,sales[['Brand','Description']].drop_duplicates(),on='Brand',how='left')\n",
    "bar_width = 0.4\n",
    "index = np.arange(len(top_10_to_order))\n",
    "\n",
    "plt.figure(figsize=(15, 10))\n",
    "bar1 = plt.bar(index, top_10_to_order['current_stock'], bar_width, label='Current Stock', color='b')\n",
    "bar2 = plt.bar([i + bar_width for i in index], top_10_to_order['rec_stock'], bar_width, label='Recommended Stock', color='r')\n",
    "plt.ylabel('Quantity')\n",
    "plt.title('Top 10 most understocked SKUs',fontsize=20)\n",
    "plt.xticks([i + bar_width / 2 for i in index], top_10_to_order['Description'], rotation=45, ha='right')\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9e15536",
   "metadata": {
    "papermill": {
     "duration": 0.038445,
     "end_time": "2024-07-06T20:09:08.554844",
     "exception": false,
     "start_time": "2024-07-06T20:09:08.516399",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Display items never sold but held in inventory. These SKUs don't necessarily need to be immediately thrown out, but should be investigated more thoroughly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "eae638cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:09:08.633064Z",
     "iopub.status.busy": "2024-07-06T20:09:08.632676Z",
     "iopub.status.idle": "2024-07-06T20:09:08.673082Z",
     "shell.execute_reply": "2024-07-06T20:09:08.672005Z"
    },
    "papermill": {
     "duration": 0.082741,
     "end_time": "2024-07-06T20:09:08.675711",
     "exception": false,
     "start_time": "2024-07-06T20:09:08.592970",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>total_value</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>avg_price</th>\n",
       "      <th>avg_paid</th>\n",
       "      <th>avg_markup</th>\n",
       "      <th>avg_profit</th>\n",
       "      <th>current_stock</th>\n",
       "      <th>abc_class</th>\n",
       "      <th>xyz_class</th>\n",
       "      <th>...</th>\n",
       "      <th>sales_std</th>\n",
       "      <th>lead_time_mean</th>\n",
       "      <th>lead_time_std</th>\n",
       "      <th>safety_stock</th>\n",
       "      <th>EOQ</th>\n",
       "      <th>rec_stock</th>\n",
       "      <th>understock_quantity</th>\n",
       "      <th>overstock_quantity</th>\n",
       "      <th>is_understocked</th>\n",
       "      <th>is_overstocked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9509</th>\n",
       "      <td>3581</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10493.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.160255</td>\n",
       "      <td>1.739468</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9850</th>\n",
       "      <td>3594</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9646.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.337199</td>\n",
       "      <td>1.873854</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9546</th>\n",
       "      <td>3566</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9514.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.514444</td>\n",
       "      <td>1.783669</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9884</th>\n",
       "      <td>3638</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8921.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.936169</td>\n",
       "      <td>1.990926</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9660</th>\n",
       "      <td>3454</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8876.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.167662</td>\n",
       "      <td>1.992917</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8415</th>\n",
       "      <td>45649</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>115.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8413</th>\n",
       "      <td>14682</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>104.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.250000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9113</th>\n",
       "      <td>20878</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8844</th>\n",
       "      <td>2327</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.492836</td>\n",
       "      <td>2.343553</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9013</th>\n",
       "      <td>24371</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>C</td>\n",
       "      <td>Z</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2939 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Brand  total_value  Quantity  avg_price  avg_paid  avg_markup  \\\n",
       "9509   3581          0.0       0.0       0.99       NaN         NaN   \n",
       "9850   3594          0.0       0.0       0.99       NaN         NaN   \n",
       "9546   3566          0.0       0.0       0.99       NaN         NaN   \n",
       "9884   3638          0.0       0.0       0.99       NaN         NaN   \n",
       "9660   3454          0.0       0.0       0.99       NaN         NaN   \n",
       "...     ...          ...       ...        ...       ...         ...   \n",
       "8415  45649          0.0       0.0     115.99       NaN         NaN   \n",
       "8413  14682          0.0       0.0     104.99       NaN         NaN   \n",
       "9113  20878          0.0       0.0      36.99       NaN         NaN   \n",
       "8844   2327          0.0       0.0      22.99       NaN         NaN   \n",
       "9013  24371          0.0       0.0      15.99       NaN         NaN   \n",
       "\n",
       "      avg_profit  current_stock abc_class xyz_class  ... sales_std  \\\n",
       "9509         NaN        10493.0         C         Z  ...       NaN   \n",
       "9850         NaN         9646.0         C         Z  ...       NaN   \n",
       "9546         NaN         9514.0         C         Z  ...       NaN   \n",
       "9884         NaN         8921.0         C         Z  ...       NaN   \n",
       "9660         NaN         8876.0         C         Z  ...       NaN   \n",
       "...          ...            ...       ...       ...  ...       ...   \n",
       "8415         NaN            1.0         C         Z  ...       NaN   \n",
       "8413         NaN            1.0         C         Z  ...       NaN   \n",
       "9113         NaN            1.0         C         Z  ...       NaN   \n",
       "8844         NaN            1.0         C         Z  ...       NaN   \n",
       "9013         NaN            1.0         C         Z  ...       NaN   \n",
       "\n",
       "      lead_time_mean  lead_time_std  safety_stock  EOQ  rec_stock  \\\n",
       "9509        7.160255       1.739468           NaN  NaN        NaN   \n",
       "9850        7.337199       1.873854           NaN  NaN        NaN   \n",
       "9546        7.514444       1.783669           NaN  NaN        NaN   \n",
       "9884        7.936169       1.990926           NaN  NaN        NaN   \n",
       "9660        8.167662       1.992917           NaN  NaN        NaN   \n",
       "...              ...            ...           ...  ...        ...   \n",
       "8415             NaN            NaN           NaN  NaN        NaN   \n",
       "8413        7.250000       0.500000           NaN  NaN        NaN   \n",
       "9113             NaN            NaN           NaN  NaN        NaN   \n",
       "8844        7.492836       2.343553           NaN  NaN        NaN   \n",
       "9013       12.000000            NaN           NaN  NaN        NaN   \n",
       "\n",
       "      understock_quantity  overstock_quantity  is_understocked  is_overstocked  \n",
       "9509                  NaN                 NaN            False            True  \n",
       "9850                  NaN                 NaN            False            True  \n",
       "9546                  NaN                 NaN            False            True  \n",
       "9884                  NaN                 NaN            False            True  \n",
       "9660                  NaN                 NaN            False            True  \n",
       "...                   ...                 ...              ...             ...  \n",
       "8415                  NaN                 NaN            False            True  \n",
       "8413                  NaN                 NaN            False            True  \n",
       "9113                  NaN                 NaN            False            True  \n",
       "8844                  NaN                 NaN            False            True  \n",
       "9013                  NaN                 NaN            False            True  \n",
       "\n",
       "[2939 rows x 23 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "needed_stock_df.loc[(needed_stock_df.current_stock > 0) & (needed_stock_df.Quantity==0)].sort_values('current_stock',ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5480f233",
   "metadata": {
    "papermill": {
     "duration": 0.038964,
     "end_time": "2024-07-06T20:09:08.753505",
     "exception": false,
     "start_time": "2024-07-06T20:09:08.714541",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Display proportion breakdown by class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "f216fab0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:09:08.834776Z",
     "iopub.status.busy": "2024-07-06T20:09:08.834329Z",
     "iopub.status.idle": "2024-07-06T20:09:08.872415Z",
     "shell.execute_reply": "2024-07-06T20:09:08.871265Z"
    },
    "papermill": {
     "duration": 0.082057,
     "end_time": "2024-07-06T20:09:08.874928",
     "exception": false,
     "start_time": "2024-07-06T20:09:08.792871",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>abc_class</th>\n",
       "      <th>understock_quan</th>\n",
       "      <th>overstock_quan</th>\n",
       "      <th>SKUs_understocked</th>\n",
       "      <th>SKUs_overstocked</th>\n",
       "      <th>perc_understock_quan</th>\n",
       "      <th>perc_understocked</th>\n",
       "      <th>perc_overstock_quan</th>\n",
       "      <th>perc_overstocked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A</td>\n",
       "      <td>43820.0</td>\n",
       "      <td>1915076.0</td>\n",
       "      <td>104</td>\n",
       "      <td>1396</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.71</td>\n",
       "      <td>0.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>B</td>\n",
       "      <td>85724.0</td>\n",
       "      <td>555641.0</td>\n",
       "      <td>294</td>\n",
       "      <td>1435</td>\n",
       "      <td>0.30</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>C</td>\n",
       "      <td>155259.0</td>\n",
       "      <td>242161.0</td>\n",
       "      <td>1658</td>\n",
       "      <td>4862</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  abc_class  understock_quan  overstock_quan  SKUs_understocked  \\\n",
       "0         A          43820.0       1915076.0                104   \n",
       "1         B          85724.0        555641.0                294   \n",
       "2         C         155259.0        242161.0               1658   \n",
       "\n",
       "   SKUs_overstocked  perc_understock_quan  perc_understocked  \\\n",
       "0              1396                  0.15               0.07   \n",
       "1              1435                  0.30               0.16   \n",
       "2              4862                  0.55               0.20   \n",
       "\n",
       "   perc_overstock_quan  perc_overstocked  \n",
       "0                 0.71              0.91  \n",
       "1                 0.20              0.78  \n",
       "2                 0.09              0.60  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_by_abc = needed_stock_df.groupby('abc_class').agg(\n",
    "    understock_quan = ('understock_quantity','sum'),\n",
    "    overstock_quan = ('overstock_quantity','sum'),\n",
    "    SKUs_understocked = ('is_understocked','sum'),\n",
    "    SKUs = ('abc_class','count'),\n",
    "    SKUs_overstocked = ('is_overstocked','sum')).reset_index()\n",
    "df_by_abc['perc_understock_quan'] = df_by_abc.understock_quan.div(df_by_abc.understock_quan.sum()).round(2)\n",
    "df_by_abc['perc_understocked'] = df_by_abc.SKUs_understocked.div(df_by_abc.SKUs).round(2)\n",
    "df_by_abc['perc_overstock_quan'] = df_by_abc.overstock_quan.div(df_by_abc.overstock_quan.sum()).round(2)\n",
    "df_by_abc['perc_overstocked'] = df_by_abc.SKUs_overstocked.div(df_by_abc.SKUs).round(2)\n",
    "df_by_abc.drop('SKUs',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "0dfb9a8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:09:08.957419Z",
     "iopub.status.busy": "2024-07-06T20:09:08.956529Z",
     "iopub.status.idle": "2024-07-06T20:09:08.992863Z",
     "shell.execute_reply": "2024-07-06T20:09:08.991555Z"
    },
    "papermill": {
     "duration": 0.079604,
     "end_time": "2024-07-06T20:09:08.995649",
     "exception": false,
     "start_time": "2024-07-06T20:09:08.916045",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>xyz_class</th>\n",
       "      <th>understock_quan</th>\n",
       "      <th>overstock_quan</th>\n",
       "      <th>SKUs_understocked</th>\n",
       "      <th>SKUs_overstocked</th>\n",
       "      <th>perc_understock_quan</th>\n",
       "      <th>perc_understocked</th>\n",
       "      <th>perc_overstock_quan</th>\n",
       "      <th>perc_overstocked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>X</td>\n",
       "      <td>129606.0</td>\n",
       "      <td>2197105.0</td>\n",
       "      <td>287</td>\n",
       "      <td>2167</td>\n",
       "      <td>0.46</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.81</td>\n",
       "      <td>0.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Y</td>\n",
       "      <td>105346.0</td>\n",
       "      <td>440784.0</td>\n",
       "      <td>784</td>\n",
       "      <td>1573</td>\n",
       "      <td>0.37</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Z</td>\n",
       "      <td>49851.0</td>\n",
       "      <td>74989.0</td>\n",
       "      <td>985</td>\n",
       "      <td>3953</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.62</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  xyz_class  understock_quan  overstock_quan  SKUs_understocked  \\\n",
       "0         X         129606.0       2197105.0                287   \n",
       "1         Y         105346.0        440784.0                784   \n",
       "2         Z          49851.0         74989.0                985   \n",
       "\n",
       "   SKUs_overstocked  perc_understock_quan  perc_understocked  \\\n",
       "0              2167                  0.46               0.11   \n",
       "1              1573                  0.37               0.31   \n",
       "2              3953                  0.18               0.15   \n",
       "\n",
       "   perc_overstock_quan  perc_overstocked  \n",
       "0                 0.81              0.85  \n",
       "1                 0.16              0.62  \n",
       "2                 0.03              0.62  "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_by_xyz = needed_stock_df.groupby('xyz_class').agg(\n",
    "    understock_quan = ('understock_quantity','sum'),\n",
    "    overstock_quan = ('overstock_quantity','sum'),\n",
    "    SKUs = ('xyz_class','count'),\n",
    "    SKUs_understocked = ('is_understocked','sum'),\n",
    "    SKUs_overstocked = ('is_overstocked','sum')).reset_index()\n",
    "df_by_xyz['perc_understock_quan'] = df_by_xyz.understock_quan.div(df_by_xyz.understock_quan.sum()).round(2)\n",
    "df_by_xyz['perc_understocked'] = df_by_xyz.SKUs_understocked.div(df_by_xyz.SKUs).round(2)\n",
    "df_by_xyz['perc_overstock_quan'] = df_by_xyz.overstock_quan.div(df_by_xyz.overstock_quan.sum()).round(2)\n",
    "df_by_xyz['perc_overstocked'] = df_by_xyz.SKUs_overstocked.div(df_by_xyz.SKUs).round(2)\n",
    "df_by_xyz.drop('SKUs',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "97f14aa1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:09:09.076484Z",
     "iopub.status.busy": "2024-07-06T20:09:09.075376Z",
     "iopub.status.idle": "2024-07-06T20:09:09.117236Z",
     "shell.execute_reply": "2024-07-06T20:09:09.115955Z"
    },
    "papermill": {
     "duration": 0.085021,
     "end_time": "2024-07-06T20:09:09.119808",
     "exception": false,
     "start_time": "2024-07-06T20:09:09.034787",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>abc_xyz_class</th>\n",
       "      <th>understock_quan</th>\n",
       "      <th>overstock_quan</th>\n",
       "      <th>SKUs_understocked</th>\n",
       "      <th>SKUs_overstocked</th>\n",
       "      <th>perc_understock_quan</th>\n",
       "      <th>perc_understocked</th>\n",
       "      <th>perc_overstock_quan</th>\n",
       "      <th>perc_overstocked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AX</td>\n",
       "      <td>35675.0</td>\n",
       "      <td>1763445.0</td>\n",
       "      <td>72</td>\n",
       "      <td>1249</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.65</td>\n",
       "      <td>0.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AY</td>\n",
       "      <td>7398.0</td>\n",
       "      <td>150055.0</td>\n",
       "      <td>28</td>\n",
       "      <td>141</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AZ</td>\n",
       "      <td>747.0</td>\n",
       "      <td>1576.0</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.29</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>BX</td>\n",
       "      <td>52667.0</td>\n",
       "      <td>392227.0</td>\n",
       "      <td>140</td>\n",
       "      <td>816</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BY</td>\n",
       "      <td>31228.0</td>\n",
       "      <td>156554.0</td>\n",
       "      <td>130</td>\n",
       "      <td>555</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>BZ</td>\n",
       "      <td>1829.0</td>\n",
       "      <td>6860.0</td>\n",
       "      <td>24</td>\n",
       "      <td>64</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>CX</td>\n",
       "      <td>41264.0</td>\n",
       "      <td>41433.0</td>\n",
       "      <td>75</td>\n",
       "      <td>102</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.39</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>CY</td>\n",
       "      <td>66720.0</td>\n",
       "      <td>134175.0</td>\n",
       "      <td>626</td>\n",
       "      <td>877</td>\n",
       "      <td>0.23</td>\n",
       "      <td>0.38</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>CZ</td>\n",
       "      <td>47275.0</td>\n",
       "      <td>66553.0</td>\n",
       "      <td>957</td>\n",
       "      <td>3883</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.62</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  abc_xyz_class  understock_quan  overstock_quan  SKUs_understocked  \\\n",
       "0            AX          35675.0       1763445.0                 72   \n",
       "1            AY           7398.0        150055.0                 28   \n",
       "2            AZ            747.0          1576.0                  4   \n",
       "3            BX          52667.0        392227.0                140   \n",
       "4            BY          31228.0        156554.0                130   \n",
       "5            BZ           1829.0          6860.0                 24   \n",
       "6            CX          41264.0         41433.0                 75   \n",
       "7            CY          66720.0        134175.0                626   \n",
       "8            CZ          47275.0         66553.0                957   \n",
       "\n",
       "   SKUs_overstocked  perc_understock_quan  perc_understocked  \\\n",
       "0              1249                  0.13               0.05   \n",
       "1               141                  0.03               0.16   \n",
       "2                 6                  0.00               0.29   \n",
       "3               816                  0.18               0.14   \n",
       "4               555                  0.11               0.18   \n",
       "5                64                  0.01               0.25   \n",
       "6               102                  0.14               0.39   \n",
       "7               877                  0.23               0.38   \n",
       "8              3883                  0.17               0.15   \n",
       "\n",
       "   perc_overstock_quan  perc_overstocked  \n",
       "0                 0.65              0.93  \n",
       "1                 0.06              0.82  \n",
       "2                 0.00              0.43  \n",
       "3                 0.14              0.80  \n",
       "4                 0.06              0.77  \n",
       "5                 0.00              0.66  \n",
       "6                 0.02              0.54  \n",
       "7                 0.05              0.53  \n",
       "8                 0.02              0.62  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_by_abc_xyz = needed_stock_df.groupby('abc_xyz_class').agg(\n",
    "    understock_quan = ('understock_quantity','sum'),\n",
    "    overstock_quan = ('overstock_quantity','sum'),\n",
    "    SKUs = ('abc_xyz_class','count'),\n",
    "    SKUs_understocked = ('is_understocked','sum'),\n",
    "    SKUs_overstocked = ('is_overstocked','sum')).reset_index()\n",
    "df_by_abc_xyz['perc_understock_quan'] = df_by_abc_xyz.understock_quan.div(df_by_abc_xyz.understock_quan.sum()).round(2)\n",
    "df_by_abc_xyz['perc_understocked'] = df_by_abc_xyz.SKUs_understocked.div(df_by_abc_xyz.SKUs).round(2)\n",
    "df_by_abc_xyz['perc_overstock_quan'] = df_by_abc_xyz.overstock_quan.div(df_by_abc_xyz.overstock_quan.sum()).round(2)\n",
    "df_by_abc_xyz['perc_overstocked'] = df_by_abc_xyz.SKUs_overstocked.div(df_by_abc_xyz.SKUs).round(2)\n",
    "df_by_abc_xyz.drop('SKUs',axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c72e3e28",
   "metadata": {
    "papermill": {
     "duration": 0.039092,
     "end_time": "2024-07-06T20:09:09.198234",
     "exception": false,
     "start_time": "2024-07-06T20:09:09.159142",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Observations: Every class suffers from severe overstocking, A and X class most of all. Many also have significant understocking, particularly the C and Y classes, although they aren't as much of a priority. This suggests that the company has overbet on its consistent winners, underestimating the cost of overstocking them, while underbetting on its less shiny SKUs, underestimating the cost of being out of stock."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "fb1b5ded",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-06T20:09:09.279051Z",
     "iopub.status.busy": "2024-07-06T20:09:09.278627Z",
     "iopub.status.idle": "2024-07-06T20:09:09.287582Z",
     "shell.execute_reply": "2024-07-06T20:09:09.286335Z"
    },
    "papermill": {
     "duration": 0.052315,
     "end_time": "2024-07-06T20:09:09.290126",
     "exception": false,
     "start_time": "2024-07-06T20:09:09.237811",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Total stock: 4,885,776\n",
      "Total understock: 284,803\n",
      "Total overstock: 2,712,878\n",
      "Recommended total stock: 2,457,701\n",
      "Possibile stock reduction: 49.7%\n"
     ]
    }
   ],
   "source": [
    "total_stock = df_by_class.current_stock.sum()\n",
    "total_understock = df_by_abc_xyz.understock_quan.sum()\n",
    "total_overstock = df_by_abc_xyz.overstock_quan.sum()\n",
    "rec_total_stock = total_stock+total_understock-total_overstock\n",
    "stock_reduction = 1-rec_total_stock/total_stock\n",
    "print(f'\\nTotal stock: {total_stock:,.0f}')\n",
    "print(f'Total understock: {total_understock:,.0f}')\n",
    "print(f'Total overstock: {total_overstock:,.0f}')\n",
    "print(f'Recommended total stock: {rec_total_stock:,.0f}')\n",
    "print(f'Possibile stock reduction: {round(stock_reduction*100,1)}%')"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 3512210,
     "sourceId": 6126523,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 95.221518,
   "end_time": "2024-07-06T20:09:10.455307",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-06T20:07:35.233789",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
